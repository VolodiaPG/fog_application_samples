RUN := env_var_or_default("RUN", "poetry run python")
DOCKER := env_var_or_default("DOCKER", "podman")

# Entrypoint, run deploy and then tunnels
_default:
    @just --list

init user *FLAGS:
    #!/usr/bin/env bash
    cat <<EOF > ~/.ssh/config
    Host !access.grid5000.fr *.grid5000.fr
    User {{user}}
    ProxyJump {{user}}@access.grid5000.fr
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null
    ForwardAgent yes
    EOF

    {{RUN}} integration.py init --g5k_user={{user}} {{FLAGS}}


mprocs:
    mprocs --server 127.0.0.1:4050

deploy fog_node_image=env_var("DEPLOYMENT_FOG_NODE_IMAGE") market_image=env_var("DEPLOYMENT_MARKET_IMAGE") name=env_var_or_default("DEPLOYMENT_NAME", "Nix❄️+En0SLib FTW ❤️") walltime=env_var_or_default("DEPLOYMENT_WALLTIME", "2:00:00") $CLUSTER="paravance" +FLAGS='':
    {{RUN}} integration.py up --name={{name}} --walltime {{walltime}} {{FLAGS}}
    {{RUN}} integration.py network
    {{RUN}} integration.py monitoring
    {{RUN}} integration.py iot-emulation
    {{RUN}} integration.py k3s-deploy --fog_node_image={{fog_node_image}} --market_image={{market_image}}

# Refresh the container images hosted by k3s on all deployed nodes
refresh:
    {{RUN}} integration.py k3s-refresh
    {{RUN}} integration.py iot-emulation
    {{RUN}} integration.py monitoring
    {{RUN}} integration.py k3s-deploy

# Open SSH tunnels
tunnels +FLAGS='':
    {{RUN}} integration.py tunnels {{FLAGS}}

# List end nodes of the Fog network
endpoints:
	{{RUN}} integration.py endpoints

_is_connected city_name_node_target market_local_port:
    #!/usr/bin/env bash
    if [[ $(curl -s "localhost:{{market_local_port}}/api/fog" | jq '.[] | select(.tags[] == "{{city_name_node_target}}") | .id' | sed -nE 's/"(.*)"/\1/p') ]]; then
        echo "✅ {{city_name_node_target}} is connected"
    else
        echo "❌"
    fi

is_connected city_name_node_target market_local_port='8088':
    @watch --no-title --color --no-wrap just _is_connected {{city_name_node_target}} {{market_local_port}}


# expe to target node_id for n repetitions with a delay between each
expe city_name_node_target max_latency='50' nb_functions='50' market_local_port='8088' iot_local_port='3003' first_node_port='3003':
    #!/usr/bin/env bash
    NODE_TARGET=$(curl "localhost:{{market_local_port}}/api/fog" | jq '.[] | select(.tags[] == "{{city_name_node_target}}") | .id' | sed -nE 's/"(.*)"/\1/p')
    NODE_TARGET_IP=$(just endpoints | sed -nE 's/{{city_name_node_target}} -> (.*)/\1/p')
    IOT_IP=$(just endpoints | sed -nE 's/Iot emulation IP -> (.*)/\1/p')
    echo "iot -> $IOT_IP"
    echo "target node -> $NODE_TARGET_IP ($NODE_TARGET)"
    ./expe.sh {{max_latency}} $NODE_TARGET {{nb_functions}} {{market_local_port}} {{iot_local_port}} $IOT_IP $NODE_TARGET_IP {{first_node_port}}

scenario city_name_node_target wait_time='600' max_latency='50' nb_functions='50' market_local_port='8088' iot_local_port='3003' first_node_port='3003':
    #!/usr/bin/env bash
    set -ex

    until [[ "$(just _is_connected {{city_name_node_target}} {{market_local_port}})" =~ "✅" ]]; do sleep 10; done
    sleep 30
    just expe {{city_name_node_target}} {{max_latency}} {{nb_functions}} {{market_local_port}} {{iot_local_port}} {{first_node_port}}
    sleep 10

    last_jj=15
    for jj in $(seq 500 -300 $last_jj); do
        just interval $jj
        sleep {{wait_time}}
        just interval 0 false
        sleep 30
    done
    for jj in $(seq $last_jj -3 5); do
        just interval $jj
        sleep {{wait_time}}
        just interval 0 false
        sleep 30
    done
    
    just collect

scenarii city_name_node_target wait_time='600' max_latency='50' nb_functions='50' market_local_port='8088' iot_local_port='3003' first_node_port='3003':
    #!/usr/bin/env bash
    set -ex

    echo "Using image $DEPLOYMENT_FOG_NODE_IMAGE and $DEPLOYMENT_MARKET_IMAGE"

    for ii in $(seq 1 3); do
        just deploy $DEPLOYMENT_FOG_NODE_IMAGE $DEPLOYMENT_MARKET_IMAGE $DEPLOYMENT_NAME $DEPLOYMENT_WALLTIME paravance --force
        sleep 60

        export configs_mem=50
        export configs_cpu=50
        just tunnels --command="'just scenario {{city_name_node_target}} {{wait_time}} {{max_latency}} {{nb_functions}} {{market_local_port}} {{iot_local_port}} {{first_node_port}}'"
    done

    just clean


# Delete the Job on grid'5000 and local EnosLib files
clean:
    {{RUN}} integration.py clean || true
    rm -rf enos_* current cachedir __enos*

collect $port="9090" $period="1h":
    mkdir -p metrics
    {{RUN}} collect.py
    (rm metrics/* || true) && (tar -xvf latest_metrics.tar.gz -C metrics || true)

logs *FLAGS:
    {{RUN}} integration.py logs {{FLAGS}}

interval period='20' enabled='true' iot_local_port='3003':
    curl -X POST --url "http://localhost:{{iot_local_port}}/api/interval?enabled={{enabled}}&intervalMs={{period}}"

lab:
    chmod 777 experiment.ipynb
    {{DOCKER}} stop jupyter_lab || true
    {{DOCKER}} rm jupyter_lab || true
    {{DOCKER}} run -it --name jupyter_lab -p 8888:8888 -v "{{justfile_directory()}}":/home/jovyan jupyter/r-notebook:latest

lab_token:
    {{DOCKER}} exec jupyter_lab jupyter lab list

lab_pdf:
    {{DOCKER}} exec jupyter_lab jupyter nbconvert experiment.ipynb --no-input --to pdf

docker_enos name walltime fog_node_image market_image cmd="bash":
    nix build --extra-experimental-features nix-command --extra-experimental-features flakes .#docker
    {{DOCKER}} load < result
    {{DOCKER}} run -it --rm \
        --workdir /home/enos \
        -v {{justfile_directory()}}/integration.py:/home/enos/integration.py:ro \
        -v {{justfile_directory()}}/collect.py:/home/enos/collect.py:ro \
        -v {{justfile_directory()}}/definitions.py:/home/enos/definitions.py:ro \
        -v {{justfile_directory()}}/monitoring:/home/enos/monitoring:ro \
        -v {{justfile_directory()}}/k3s.py:/home/enos/k3s.py:ro \
        -v {{justfile_directory()}}/expe.sh:/home/enos/expe.sh:ro \
        -v {{justfile_directory()}}/justfile:/home/enos/justfile:ro \
        -v {{justfile_directory()}}/metrics-arks:/home/enos/metrics-arks \
        -v ~/.python-grid5000.yaml:/root/.python-grid5000.yaml:ro \
        -v ~/.ssh/id_rsa:/root/.ssh/id_rsa:ro \
        -v ~/.ssh/id_rsa.pub:/root/.ssh/id_rsa.pub:ro \
        -v $(readlink -f $SSH_AUTH_SOCK):/ssh-agent \
        -e SSH_AUTH_SOCK=/ssh-agent \
        -e DEPLOYMENT_NAME={{name}} \
        -e DEPLOYMENT_WALLTIME={{walltime}} \
        -e DEPLOYMENT_FOG_NODE_IMAGE={{fog_node_image}} \
        -e DEPLOYMENT_MARKET_IMAGE={{market_image}} \
        --name {{name}} \
        enos_deployment:latest bash -c -E "{{cmd}}"

docker_scenarii name walltime fog_node_image market_image city_name_node_target wait_time='600' max_latency='50' nb_functions='50':
    just docker_enos {{name}} {{walltime}} {{fog_node_image}} {{market_image}} "just scenarii {{city_name_node_target}} {{wait_time}} {{max_latency}} {{nb_functions}}"

dev:
    nix develop --extra-experimental-features nix-command --extra-experimental-features flakes
