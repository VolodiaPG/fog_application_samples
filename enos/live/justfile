RUN := "poetry run python integration.py"
DOCKER := "podman"

# Entrypoint, run deploy and then tunnels
_default:
    @just --list

init user *FLAGS:
    #!/usr/bin/env bash
    cat <<EOF > ~/.ssh/config
    Host !access.grid5000.fr *.grid5000.fr
    User {{user}}
    ProxyJump {{user}}@access.grid5000.fr
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null
    ForwardAgent yes
    EOF

    {{RUN}} init --g5k_user={{user}} {{FLAGS}}


mprocs:
    mprocs --server 127.0.0.1:4050

deploy $CLUSTER="gros" +FLAGS='':
    {{RUN}} up {{FLAGS}}
    {{RUN}} network
    {{RUN}} monitoring
    {{RUN}} k3s-deploy
    {{RUN}} iot-emulation

local:
    @just deploy "" --vagrant

# Refresh the container images hosted by k3s on all deployed nodes
refresh:
    {{RUN}} k3s-refresh
    {{RUN}} iot-emulation
    {{RUN}} k3s-deploy
    {{RUN}} monitoring

# Open SSH tunnels
tunnels +FLAGS='':
    {{RUN}} tunnels {{FLAGS}}

# List end nodes of the Fog network
endpoints:
	{{RUN}} endpoints

_is_connected city_name_node_target market_local_port:
    #!/usr/bin/env bash
    if [[ $(curl -s "localhost:{{market_local_port}}/api/fog" | jq '.[] | select(.tags[] == "{{city_name_node_target}}") | .id' | sed -nE 's/"(.*)"/\1/p') ]]; then
        echo "✅ {{city_name_node_target}} is connected"
    else
        echo "❌"
    fi

is_connected city_name_node_target market_local_port='8088':
    @watch --no-title --color --no-wrap just _is_connected {{city_name_node_target}} {{market_local_port}}


# expe to target node_id for n repetitions with a delay between each
expe city_name_node_target n='50' delay='30' market_local_port='8088' iot_local_port='3003' first_node_port='3003':
    #!/usr/bin/env bash
    NODE_TARGET=$(curl "localhost:{{market_local_port}}/api/fog" | jq '.[] | select(.tags[] == "{{city_name_node_target}}") | .id' | sed -nE 's/"(.*)"/\1/p')
    NODE_TARGET_IP=$(just endpoints | sed -nE 's/{{city_name_node_target}} -> (.*)/\1/p')
    IOT_IP=$(just endpoints | sed -nE 's/Iot emulation IP -> (.*)/\1/p')
    echo "iot -> $IOT_IP"
    echo "target node -> $NODE_TARGET_IP ($NODE_TARGET)"
    ./expe.sh {{n}} $NODE_TARGET {{delay}} {{market_local_port}} {{iot_local_port}} $IOT_IP $NODE_TARGET_IP {{first_node_port}}

scenario city_name_node_target wait_time='600' n='50' delay='30' market_local_port='8088' iot_local_port='3003' first_node_port='3003':
    just interval 1000
    sleep 5
    just expe {{city_name_node_target}} {{n}} {{delay}} {{market_local_port}} {{iot_local_port}} {{first_node_port}}
    sleep {{wait_time}}
    just interval 1000
    sleep {{wait_time}}
    just interval 500
    sleep {{wait_time}}
    just interval 100
    sleep {{wait_time}}
    just interval 50
    sleep {{wait_time}}
    just interval 10
    sleep {{wait_time}}
    just collect

# Delete the Job on grid'5000 and local EnosLib files
clean:
    {{RUN}} clean || true
    rm -rf enos_* current cachedir __enos*

collect $port="9090" $period="1h":
    poetry run python collect.py
    (rm metrics/* || true) && tar -xvf latest_metrics.tar.gz -C metrics

logs *FLAGS:
    {{RUN}} logs {{FLAGS}}

interval period='20' iot_local_port='3003':
    curl -X POST --url http://localhost:{{iot_local_port}}/api/interval?interval_ms={{period}}

lab:
    {{DOCKER}} run -it -p 8888:8888 -v "{{justfile_directory()}}":/home/jovyan/work jupyter/r-notebook:latest