RUN := "python integration.py"

# Entrypoint, run deploy and then tunnels
_default:
    @just --list

mprocs:
    mprocs --server 127.0.0.1:4050


# Deploy the stack to redy the eperiment on grid'5000
deploy $CLUSTER="gros" +UP_FLAGS='':
    {{RUN}} up {{UP_FLAGS}}
    {{RUN}} network
    {{RUN}} iot-emulation
    {{RUN}} k3s-deploy
    {{RUN}} monitoring

# Refresh the container images hosted by k3s on all deployed nodes
refresh:
    {{RUN}} iot-emulation
    {{RUN}} k3s-deploy
    {{RUN}} monitoring

# Open SSH tunnels
tunnels +FLAGS='':
    {{RUN}} tunnels {{FLAGS}}

# List end nodes of the Fog network
endpoints:
	{{RUN}} endpoints

is_connected city_name_node_target market_local_port='8080':
    #!/usr/bin/env bash
    if [[ $(curl -s "localhost:{{market_local_port}}/api/fog" | jq '.[] | select(.tags[] == "{{city_name_node_target}}") | .id' | sed -nE 's/"(.*)"/\1/p') ]]; then
        echo "{{city_name_node_target}} is connected ✅"
    else
        echo "❌"
    fi


# expe to target node_id for n repetitions with a delay between each
expe city_name_node_target n='50' delay='30' market_local_port='8080' iot_local_port='3003':
    #!/usr/bin/env bash
    NODE_TARGET=$(curl "localhost:{{market_local_port}}/api/fog" | jq '.[] | select(.tags[] == "{{city_name_node_target}}") | .id' | sed -nE 's/"(.*)"/\1/p')
    NODE_TARGET_IP=$(just endpoints | sed -nE 's/{{city_name_node_target}} -> (.*)/\1/p')
    IOT_IP=$(just endpoints | sed -nE 's/Iot emulation IP -> (.*)/\1/p')
    echo $NODE_TARGET
    echo $IOT_IP
    echo $NODE_TARGET_IP
    ./expe.sh {{n}} $NODE_TARGET {{delay}} {{market_local_port}} {{iot_local_port}} $IOT_IP $NODE_TARGET_IP

# Delete the Job on grid'5000 and local EnosLib files
clean:
    {{RUN}} clean || true
    rm -rf enos_* current cachedir __enos*

collect extract="ss" $port="9090" $period="1h":
    python collect.py
    {{extract}} || rm metrics/* && tar -xvf latest_metrics.tar.gz -C metrics
    # {{RUN}} logs --all

latency src dest:
	{{RUN}} latency --src {{src}} --dest {{dest}}
