#KUBECONFIG :=  env_var('HOME') / ".kube" / "config"
KUBECONFIG :=  ".." / "enos" / "live" / "iso" / "vm.kubeconfig"
RUST_LOG := "warn,fog_node=trace,openfaas=warn,kube_metrics=trace,helper=trace,market=trace"
DOCKER := "podman"
MARKET_PORT := "30008"

# Default command when no verb specified
_default:
    @just --list

# Build a target (market or fog_node)
build *FLAGS:
    cargo build {{FLAGS}}

pre_commit: check (check "clippy")
    cargo fmt

# Run cargo check
check subcommand="check":
    just _{{subcommand}}

    just _{{subcommand}} --features edge_first
    just _{{subcommand}} --features cloud_only
    just _{{subcommand}} --features edge_ward
    
    just _{{subcommand}} --features jaeger

# Check outdated or unused deps (req. cargo-outdated + updeps crate)
check_deps:
	cargo outdated -R
	cargo udeps --all-targets

_check *FLAGS:
    cargo check {{FLAGS}}

_clippy *FLAGS:
    cargo clippy --fix --allow-staged --allow-dirty {{FLAGS}}  -- -A clippy::let_unit_value -D warnings

# Run the market
run_market *FLAGS:
   SERVER_PORT={{MARKET_PORT}} RUST_LOG={{RUST_LOG}} cargo run --bin market {{FLAGS}}

# Run the node, type is market or else (generic fog_node)
run_fog_node node_type debug="false":
    #!/usr/bin/env python3
    import os
    import base64
    import subprocess

    node_type = "{{node_type}}"

    nodes = {}

    nodes["market"] = '''(
        situation: MarketConnected (
            market_ip: "127.0.0.1",
            market_port: "{{MARKET_PORT}}",
        ),
        my_id: "d2f7de01-d7e5-4afc-bc76-fb5c0e79ec7a",
        my_public_ip: "127.0.0.1",
        my_public_port_http: "3030",
        reserved_cpu: "4 cpus",
        reserved_memory: "4 GiB",
        tags: ["market connected"],
    )'''

    nodes["node_1"] = '''(
        situation: NodeConnected (
            parent_id: "d2f7de01-d7e5-4afc-bc76-fb5c0e79ec7a",
            parent_node_ip: "127.0.0.1",
            parent_node_port_http: "3030",
        ),
        my_id: "fd4f121d-6b3d-44ca-8b82-906959abaa3f",
        my_public_ip: "127.0.0.1",
        my_public_port_http: "3032",
        reserved_cpu: "1 cpu",
        reserved_memory: "1 GiB",
        tags: ["node connected 1"],
    )'''

    nodes["node_2"] = '''(
        situation: NodeConnected (
            parent_id: "fd4f121d-6b3d-44ca-8b82-906959abaa3f",
            parent_node_ip: "127.0.0.1",
            parent_node_port_http: "3032",
        ),
        my_id: "4b1a3a31-8130-431a-8a08-8a5be3becc3b",
        my_public_ip: "127.0.0.1",
        my_public_port_http: "3034",
        reserved_cpu: "1 cpu",
        reserved_memory: "1 GiB",
        tags: ["node connected 2"],
    )'''

    # Must be that port so expe.sh works magically
    nodes["node_3"] = '''(
        situation: NodeConnected (
            parent_id: "4b1a3a31-8130-431a-8a08-8a5be3becc3b",
            parent_node_ip: "127.0.0.1",
            parent_node_port_http: "3034",
        ),
        my_id: "c132ee95-5368-4bc8-9dfd-227eb77da5fc",
        my_public_ip: "127.0.0.1",
        my_public_port_http: "3035",
        reserved_cpu: "1 cpu",
        reserved_memory: "1 GiB",
        tags: ["node connected 3"],
    )'''

    if node_type not in nodes:
        print(f"Wrong node name, select one of the followings: {','.join(nodes.keys())}")
        exit(1)
    config = nodes[node_type]
    
    env_vars = {}
    env_vars['CONFIG'] = base64.b64encode(bytes(config, "utf-8")).decode("utf-8")
    env_vars['OPENFAAS_USERNAME'] = "admin"
    env_vars['OPENFAAS_PASSWORD'] = base64.b64decode(subprocess.getoutput('KUBECONFIG={{KUBECONFIG}} kubectl get secret -n openfaas basic-auth -o jsonpath="{.data.basic-auth-password}"')).decode("utf-8")
    env_vars['KUBECONFIG'] = "{{KUBECONFIG}}"
    env_vars['OPENFAAS_PORT_EXTERNAL'] = "8080"
    env_vars['RUST_LOG'] = "{{RUST_LOG}}"
    env_vars['LOG_CONFIG_FILENAME'] = "{{node_type}}.log"

    if "{{debug}}" != "false":
        env_str = "&".join([f'{key}="{value}"' for key, value in env_vars.items()])
        cmd = f'code --open-url "vscode://vadimcn.vscode-lldb/launch/command?{env_str}&./target/debug/fog_node"'
    else:
        env_str = " ".join([f'{key}="{value}"' for key, value in env_vars.items()])
        cmd = f'{env_str} ./target/debug/fog_node'

    print(cmd)
    os.system(cmd)

jaeger:
    ({{DOCKER}} stop jaeger || true)
    ({{DOCKER}} rm jaeger || true)
    {{DOCKER}} run -d --name jaeger \
        -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 \
        -p 5775:5775/udp \
        -p 6831:6831/udp \
        -p 6832:6832/udp \
        -p 5778:5778 \
        -p 16686:16686 \
        -p 14268:14268 \
        -p 9411:9411 \
        jaegertracing/all-in-one:latest

prometheus:
    ({{DOCKER}} stop prometheus || true)
    ({{DOCKER}} rm prometheus || true)
    {{DOCKER}} run \
        --net=host \
        -v ./prometheus.yaml:/etc/prometheus/prometheus.yml:z \
        prom/prometheus \
        --config.file=/etc/prometheus/prometheus.yml \
        --storage.tsdb.path=/prometheus \
        --web.console.libraries=/usr/share/prometheus/console_libraries \
        --web.console.templates=/usr/share/prometheus/consoles \
        --web.listen-address=:3090 

run debug="false" *FLAGS="": (build FLAGS)
    {{ if debug == "false" { "mprocs" } else { "sh -c" } }} "just run_fog_node market {{debug}}" \
    {{ if debug == "false" { "" } else { "&& sh -c" } }} "just run_fog_node node_2 {{debug}}" \
    {{ if debug == "false" { "" } else { "&& sh -c" } }} "just run_fog_node node_3 {{debug}}" \
    {{ if debug == "false" { "" } else { "&& sh -c" } }} "just run_fog_node node_1 {{debug}}" \
    {{ if debug == "false" { "" } else { "&& sh -c" } }} "just run_market {{FLAGS}}"

expe target_node_uuid localhost_ip $MARKET_LOCAL_PORT=MARKET_PORT $IOT_LOCAL_PORT='30080':
    cd ../enos/live && just run_expe_script {{target_node_uuid}} {{localhost_ip}}

# Consider /etc/resolv.conf -> https://github.com/helm/helm/issues/6027 if not working, just swap the dns with e.g. 1.1.1.1
k3d:
    k3d cluster create -c k3d.cluster.yaml
    arkade install openfaas
    kubectl rollout status deployment gateway -n openfaas --timeout=90s
    @just k3d-forward

k3d-forward:
    kubectl port-forward -n openfaas svc/gateway 8080:8080

k3d-clean:
    k3d cluster stop fog-node || true
    k3d cluster delete fog-node || true

container image_tag:
    nix build .#market
    {{DOCKER}} load < result
    nix build .#fog_node_{{image_tag}}_no-telemetry
    {{DOCKER}} load < result
    {{DOCKER}} tag fog_node:{{image_tag}}_no-telemetry {{image_tag}}

# Push an image to ghcr
_push image user:
    {{DOCKER}} tag {{image}} ghcr.io/{{user}}/{{image}}
    {{DOCKER}} push ghcr.io/{{user}}/{{image}}

# Push container images to ghcr.
ghcr user image_tag: (container image_tag)
    #!/usr/bin/env bash
    just _push fog_node:{{image_tag}} {{user}}&
    just _push market:latest {{user}}&
    wait

# Cleans
clean:
    rm -rf target