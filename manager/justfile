KUBECONFIG := "../iso/vm.kubeconfig"
RUST_LOG := "warn,fog_node=trace,openfaas=trace,kube_metrics=trace,helper=trace"

# Default command when no verb specified
_default:
    @just --list

# Build a target (market or fog_node)
build *FLAGS:
    cargo build --package manager --bin market {{FLAGS}}
    cargo build --package manager --bin fog_node {{FLAGS}}

# Run cargo check
check *FLAGS:
    cargo check --package manager --bin market {{FLAGS}}
    cargo check --package manager --bin fog_node {{FLAGS}}

# Check outdated or unused deps (req. cargo-outdated + updeps crate)
check_deps:
	cargo outdated -R
	cargo udeps --all-targets

clippy:
	cargo clippy --fix --allow-staged --allow-dirty  -- -A clippy::let_unit_value -D warnings

# Run the market
run_market:
   export ROCKET_PORT=8000
   cargo run --bin market

# Run the node, type is market or else (generic fog_node)
run_fog_node node_type:
    #!/usr/bin/env python3
    import os
    import base64
    import subprocess

    node_type = "{{node_type}}"

    nodes = {}

    nodes["market"] = '''MarketConnected (
        market_ip: "127.0.0.1",
        market_port: "8000",
        my_id: "d2f7de01-d7e5-4afc-bc76-fb5c0e79ec7a",
        my_public_ip: "127.0.0.1",
        my_public_port_http: "3030",
        my_public_port_rpc: "3031",
        tags: ["market connected"],
    )'''

    nodes["node_1"] = '''NodeConnected (
        parent_id: "d2f7de01-d7e5-4afc-bc76-fb5c0e79ec7a",
        parent_node_ip: "127.0.0.1",
        parent_node_port_http: "3030",
        parent_node_port_rpc: "3031",
        my_id: "fd4f121d-6b3d-44ca-8b82-906959abaa3f",
        my_public_ip: "127.0.0.1",
        my_public_port_http: "3032",
        my_public_port_rpc: "3033",
        tags: ["node connected 1"],
    )'''

    nodes["node_2"] = '''NodeConnected (
        parent_id: "fd4f121d-6b3d-44ca-8b82-906959abaa3f",
        parent_node_ip: "127.0.0.1",
        parent_node_port_http: "3032",
        parent_node_port_rpc: "3033",
        my_id: "4b1a3a31-8130-431a-8a08-8a5be3becc3b",
        my_public_ip: "127.0.0.1",
        my_public_port_http: "3034",
        my_public_port_rpc: "3035",
        tags: ["node connected 2"],
    )'''

    # Must be that port so expe.sh works magically
    nodes["node_3"] = '''NodeConnected (
        parent_id: "4b1a3a31-8130-431a-8a08-8a5be3becc3b",
        parent_node_ip: "127.0.0.1",
        parent_node_port_http: "3034",
        parent_node_port_rpc: "3035",
        my_id: "c132ee95-5368-4bc8-9dfd-227eb77da5fc",
        my_public_ip: "127.0.0.1",
        my_public_port_http: "3003",
        my_public_port_rpc: "3037",
        tags: ["node connected 3"],
    )'''

    if node_type not in nodes:
        print(f"Wrong node name, select one of the followings: {','.join(nodes.keys())}")
        exit(1)
    config = nodes[node_type]
    
    env_vars = {}
    env_vars['CONFIG'] = base64.b64encode(bytes(config, "utf-8")).decode("utf-8")
    if node_type == "market":
        env_vars['ROCKET_PORT'] = "3030"
    env_vars['KUBECONFIG'] = "{{KUBECONFIG}}"
    env_vars['OPENFAAS_USERNAME'] = "admin"
    env_vars['OPENFAAS_PASSWORD'] = subprocess.getoutput('KUBECONFIG={{KUBECONFIG}} kubectl get secret -n openfaas basic-auth -o jsonpath="{.data.basic-auth-password}" | base64 --decode; echo')
    env_vars['RUST_LOG'] = "{{RUST_LOG}}"
    env_vars['LOG_CONFIG_FILENAME'] = "{{node_type}}.log"

    env_str = "&".join([f'{key}="{value}"' for key, value in env_vars.items()])

    cmd = f'''cargo build --bin fog_node \
        && code --open-url "vscode://vadimcn.vscode-lldb/launch/command?{env_str}&./target/debug/fog_node"
        '''
    print(cmd)
    os.system(cmd)

run_all:
    just run_fog_node market
    just run_fog_node node_1
    just run_fog_node node_2
    just run_fog_node node_3
    just run_market

expe target_node_uuid n='50' delay='30' market_local_port='8000' iot_local_port='30080':
    cd ../iso/enos \
    && ./expe.sh {{n}} {{target_node_uuid}} {{delay}} {{market_local_port}} {{iot_local_port}} 127.0.0.1 127.0.0.1

# Build the project as a docker image. Flavors are [default, naive, perftools]
docker $flavor="default":
    #!/usr/bin/env bash
    echo "Building flavor: $flavor"
    if [ $flavor = naive ]; then
        nix build .#docker_fog_node_naive
    elif [ $flavor = perftools ]; then
        nix build .#docker_fog_node_perftools
    else
        nix build .#docker_fog_node
    fi
    docker load < result

    nix build .#docker_market
    docker load < result

    #nix build .#docker_perftools
    #docker load < result

docker_native user $flavor="default":
    #!/usr/bin/env bash
    set -e

    echo "Building flavor: $flavor"
    if [ $flavor = naive ]; then
        docker build -t fog_node:latest --target fog_node-naive .
    else
        docker build -t fog_node:latest --target fog_node-default .
    fi

    docker build -t market:latest --target market-default .

# Push an image to ghcr
_push image user:
    docker tag {{image}} ghcr.io/{{user}}/{{image}}
    docker push ghcr.io/{{user}}/{{image}}

# Push docker images to ghcr. See `docker` for flavors to build
ghcr_native user flavor="default":
    @just docker_native {{flavor}}
    just _push fog_node:latest {{user}}
    just _push market:latest {{user}}

# Push docker images to ghcr. See `docker` for flavors to build
ghcr user flavor="default":
    @just docker {{flavor}}
    just _push fog_node:latest {{user}}
    just _push market:latest {{user}}
    just _push perftools:latest {{user}}

# Cleans
clean:
    rm -rf target