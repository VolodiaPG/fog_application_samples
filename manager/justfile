PROMETHEUS_VERSION := "2.36.1"

# Default command when no verb specified
_default:
    @just --list

# Build a target (market or fog_node)
build *FLAGS:
    cargo build --package manager --bin market {{FLAGS}}
    cargo build --package manager --bin fog_node {{FLAGS}}

# Run cargo check
check *FLAGS:
    cargo check --package manager --bin market {{FLAGS}}
    cargo check --package manager --bin fog_node {{FLAGS}}

# Check outdated or unused deps (req. cargo-outdated + updeps crate)
check_deps:
	cargo outdated -R
	cargo udeps --all-targets

clippy:
	cargo clippy --fix --allow-staged --allow-dirty  -- -A clippy::let_unit_value -D warnings

# Run the market
run_market:
   export ROCKET_PORT=8000
   cargo run --package manager --bin market

# Run the node, type is market or else (generic fog_node)
run_fog_node $node_type *FLAGS:
    #!/usr/bin/python3
    import os
    import base64

    MARKET_CONNECTED_NODE = """MarketConnected (
        market_ip: "127.0.0.1",
        market_port: 8000,
        my_id: "d2f7de01-d7e5-4afc-bc76-fb5c0e79ec7a",
        my_public_ip: "127.0.0.1",
        my_public_port: 3030,
        tags: ["market connected"],
    )

    """

    NODE_CONNECTED_NODE = """NodeConnected (
        parent_id: "d2f7de01-d7e5-4afc-bc76-fb5c0e79ec7a",
        parent_node_ip: "127.0.0.1",
        parent_node_port: 3030,
        my_id: "fd4f121d-6b3d-44ca-8b82-906959abaa3f",
        my_public_ip: "127.0.0.1",
        my_public_port: 3031,
        tags: ["node connected"],
    )

    """
    node_type = os.environ["node_type"]
    config = MARKET_CONNECTED_NODE if (node_type=="market") else NODE_CONNECTED_NODE
    os.environ["CONFIG"] = base64.b64encode(bytes(config, "utf-8")).decode("utf-8")
    os.environ["ROCKET_PORT"] = "3030" if (node_type=="market") else "3031"
    os.system('''export ID=1 \
    && export KUBECONFIG="../kubeconfig-master-${ID}" \
    OPENFAAS_USERNAME="admin" \
    OPENFAAS_PASSWORD=$(kubectl get secret -n openfaas --kubeconfig=${KUBECONFIG} basic-auth -o jsonpath="{.data.basic-auth-password}" | base64 --decode; echo) \
    && cargo run {{FLAGS}} --package manager --bin fog_node
    ''')

# Build the project as a docker image. Flavors are [default, naive]
docker flavor="default":
    #!/usr/bin/env bash
    echo "Building flavor: {{flavor}}"
    if [ {{flavor}} = naive]; then
        docker build -t fog_node:latest --target fog_node-naive .
        docker build -t market:latest --target market-default .
    else
        docker build -t fog_node:latest --target fog_node-default .
        docker build -t market:latest --target market-default .
    fi


# Push an image to ghcr
_push image user:
    docker tag {{image}} ghcr.io/{{user}}/{{image}}
    docker push ghcr.io/{{user}}/{{image}}

# Push docker images to ghcr. See `docker` for flavors to build
ghcr user flavor="default": _check_uncommited (docker "{{flavor}}")
    just _push fog_node:latest {{user}}
    just _push market:latest {{user}}

# Start prometheus locally
prometheus:
    if ! test -d "./prometheus"; then just install-prometheus; fi
    ./prometheus/prometheus --config.file=prometheus.yaml

# Install prometheus locally
install-prometheus:
    mkdir -p prometheus
    curl -L https://github.com/prometheus/prometheus/releases/download/v{{PROMETHEUS_VERSION}}/prometheus-{{PROMETHEUS_VERSION}}.linux-amd64.tar.gz | tar -xvz -C prometheus --strip-components=1
    @echo "Installed prometheus version {{PROMETHEUS_VERSION}} locally"

# Cleans
clean:
    rm -rf ./prometheus
    rm -rf target

# Check for uncommited changes
_check_uncommited:
    #!/usr/bin/env bash
    if [ -n "$(git status --porcelain | grep {{invocation_directory()}})" ]
    then
      echo "ERROR: uncommitted changes"
      exit 1
    fi

# Run market, and two fog nodes as the dev env
run_dev:
    #!/usr/bin/env bash
    echo "To enable tmux mouse interaction, add 'set -g mouse' on to your .tmux.conf"

    just build '--features fake_k8s,bottom_up_placement' || exit 1

    tmux new-session -d -s faas_fog "printf '\033]2;%s\033\\ ' 'market' ; bash -c \"just run_market ; echo 'Waiting for keypress to close...' && read\""

    until $(curl --output /dev/null --silent --head --fail "http://127.0.0.1:8000/api/health")
    do
        printf '.'
        sleep 5
    done
    tmux split-window -d -t faas_fog:0 -p20 -v "printf '\033]2;%s\033\\ ' 'fog_node market' ; bash -c \"just run_fog_node market '--features fake_k8s,bottom_up_placement' ;  echo 'Waiting for keypress to close...' && read\""

    until $(curl --output /dev/null --silent --head --fail "http://127.0.0.1:3030/api/health")
    do
        printf '.'
        sleep 1
    done
    tmux split-window -d -t faas_fog:0 -p20 -v "printf '\033]2;%s\033\\ ' 'fog_node not market' ; bash -c \"just run_fog_node not_market '--features fake_k8s,bottom_up_placement' ;  echo 'Waiting for keypress to close...' && read\""

    tmux select-layout -t faas_fog:0 tiled
    tmux attach-session -t faas_fog
