#KUBECONFIG :=  env_var('HOME') / ".kube" / "config"
KUBECONFIG :=  ".." / "testbed" / "iso" / "vm.kubeconfig"
RUST_LOG := "warn,fog_node=trace,openfaas=warn,kube_metrics=trace,helper=trace,market=trace"
DOCKER := env_var_or_default("DOCKER", "podman")
MARKET_PORT := "30008"
PROMETHEUS_PORT := "3090"
PROMETHEUS_PORT_PUSH := "3091"

# Default command when no verb specified
_default:
    @just --list

# Build a target (market or fog_node)
build *FLAGS:
    cargo build {{FLAGS}}

pre_commit:
    @nix develop .#manager -c just check 
    @nix develop .#manager -c just check "clippy" 
    nix develop .#manager -c cargo fmt

# Run cargo check
check subcommand="check":
    just _{{subcommand}} --features auction
    just _{{subcommand}} --features valuation_rates,auction

    just _{{subcommand}} --features edge_first
    just _{{subcommand}} --features edge_first_v2
    # just _{{subcommand}} --features cloud_only
    # just _{{subcommand}} --features cloud_only_v2
    just _{{subcommand}} --features edge_ward
    # just _{{subcommand}} --features edge_ward_v2
    just _{{subcommand}} --features edge_ward_v3
    
    just _{{subcommand}} --features jaeger,auction

# Check outdated or unused deps (req. cargo-outdated + updeps crate)
check_deps:
	cargo outdated -R
	cargo udeps --all-targets

_check *FLAGS:
    cargo check {{FLAGS}}

_clippy *FLAGS:
    cargo clippy --fix --allow-staged --allow-dirty {{FLAGS}}  -- -A clippy::let_unit_value -D warnings

# Run the market
run_market *FLAGS:
   SERVER_PORT={{MARKET_PORT}} \
    RUST_LOG={{RUST_LOG}} \
    INFLUX_ADDRESS="127.0.0.1:9086" \
    INFLUX_TOKEN="xowyTh1iGcNAZsZeydESOHKvENvcyPaWg8hUe3tO4vPOw_buZVwOdUrqG3gwV314aYd9SWKHcxlykcQY_rwYVQ==" \
    INFLUX_ORG="faasfog" \
    INFLUX_BUCKET="faasfog" \
    INSTANCE_NAME="marketplace" \
    cargo run --bin market {{FLAGS}}

# Run the node, type is market or else (generic fog_node)
run_fog_node node_type MY_IP_ADDRESS debug="false":
    #!/usr/bin/env python3
    import os
    import base64
    import subprocess

    node_type = "{{node_type}}"

    nodes = {}

    nodes["market"] = '''(
        situation: MarketConnected (
            market_ip: "127.0.0.1",
            market_port: "{{MARKET_PORT}}",
        ),
        my_id: "d2f7de01-d7e5-4afc-bc76-fb5c0e79ec7a",
        my_public_ip: "127.0.0.1",
        my_public_port_http: "3030",
        reserved_cpu: "8 cpus",
        reserved_memory: "8 GiB",
        tags: ["market connected"],
    )'''

    nodes["node_1"] = '''(
        situation: NodeConnected (
            parent_id: "d2f7de01-d7e5-4afc-bc76-fb5c0e79ec7a",
            parent_node_ip: "127.0.0.1",
            parent_node_port_http: "3030",
        ),
        my_id: "fd4f121d-6b3d-44ca-8b82-906959abaa3f",
        my_public_ip: "127.0.0.1",
        my_public_port_http: "3032",
        reserved_cpu: "2 cpu",
        reserved_memory: "2 GiB",
        tags: ["node_connected_1"],
    )'''

    nodes["node_2"] = '''(
        situation: NodeConnected (
            parent_id: "fd4f121d-6b3d-44ca-8b82-906959abaa3f",
            parent_node_ip: "127.0.0.1",
            parent_node_port_http: "3032",
        ),
        my_id: "4b1a3a31-8130-431a-8a08-8a5be3becc3b",
        my_public_ip: "127.0.0.1",
        my_public_port_http: "3034",
        reserved_cpu: "2 cpu",
        reserved_memory: "2 GiB",
        tags: ["node_connected_2"],
    )'''

    # Must be that port so expe.sh works magically
    nodes["node_3"] = '''(
        situation: NodeConnected (
            parent_id: "4b1a3a31-8130-431a-8a08-8a5be3becc3b",
            parent_node_ip: "127.0.0.1",
            parent_node_port_http: "3034",
        ),
        my_id: "c132ee95-5368-4bc8-9dfd-227eb77da5fc",
        my_public_ip: "127.0.0.1",
        my_public_port_http: "3035",
        reserved_cpu: "1 cpu",
        reserved_memory: "1 GiB",
        tags: ["node_connected_3"],
    )'''

    if node_type not in nodes:
        print(f"Wrong node name, select one of the followings: {','.join(nodes.keys())}")
        exit(1)
    config = nodes[node_type]
    
    env_vars = {}
    env_vars['CONFIG'] = base64.b64encode(bytes(config, "utf-8")).decode("utf-8")
    env_vars['OPENFAAS_USERNAME'] = "admin"
    env_vars['OPENFAAS_PASSWORD'] = base64.b64decode(subprocess.getoutput('KUBECONFIG={{KUBECONFIG}} kubectl get secret -n openfaas basic-auth -o jsonpath="{.data.basic-auth-password}"')).decode("utf-8")
    env_vars['KUBECONFIG'] = "{{KUBECONFIG}}"
    env_vars['OPENFAAS_PORT_EXTERNAL'] = "8080"
    env_vars['RUST_LOG'] = "{{RUST_LOG}}"
    env_vars['LOG_CONFIG_FILENAME'] = "{{node_type}}.log"
    env_vars['COLLECTOR_IP'] = "10.42.0.1"
    env_vars['OTEL_EXPORTER_OTLP_ENDPOINT_FUNCTION']="http://10.42.0.1:4317" 

    env_vars['INFLUX_ADDRESS']="10.42.0.1:9086"
    env_vars['INFLUX_TOKEN']="xowyTh1iGcNAZsZeydESOHKvENvcyPaWg8hUe3tO4vPOw_buZVwOdUrqG3gwV314aYd9SWKHcxlykcQY_rwYVQ=="
    env_vars['INFLUX_ORG']="faasfog"
    env_vars['INFLUX_BUCKET']="faasfog" 
    env_vars['INSTANCE_NAME']="{{node_type}}" 

    env_vars['PRICING_CPU']="1.0" 
    env_vars['PRICING_MEM']="1.0" 
    env_vars['PRICING_CPU_INITIAL']="1.0" 
    env_vars['PRICING_MEM_INITIAL']="1.0" 
    env_vars['PRICING_GEOLOCATION']="1.0"

    if "{{node_type}}" in ["node_1", "node_2"]:
        env_vars['IS_CLOUD'] = "is_cloud"

    if "{{debug}}" != "false":
        env_str = "&".join([f'{key}="{value}"' for key, value in env_vars.items()])
        cmd = f'code --open-url "vscode://vadimcn.vscode-lldb/launch/command?{env_str}&./target/debug/fog_node"'
    else:
        env_str = " ".join([f'{key}="{value}"' for key, value in env_vars.items()])
        cmd = f'{env_str} ./target/debug/fog_node'

    print(cmd)
    os.system(cmd)

run MY_IP_ADDRESS debug="false" *FLAGS="--features auction": (build FLAGS)
    {{ if debug == "false" { "mprocs" } else { "sh -c" } }} "just run_fog_node market {{MY_IP_ADDRESS}} {{debug}}" \
    {{ if debug == "false" { "" } else { "&& sh -c" } }} "just run_fog_node node_2 {{MY_IP_ADDRESS}} {{debug}}" \
    {{ if debug == "false" { "" } else { "&& sh -c" } }} "just run_fog_node node_3 {{MY_IP_ADDRESS}} {{debug}}" \
    {{ if debug == "false" { "" } else { "&& sh -c" } }} "just run_fog_node node_1 {{MY_IP_ADDRESS}} {{debug}}" \
    {{ if debug == "false" { "" } else { "&& sh -c" } }} "just run_market {{FLAGS}}"

expe localhost_ip $MARKET_LOCAL_PORT=MARKET_PORT IOT_LOCAL_PORT='30080':
    cd ../testbed && nix develop .#testbed -c sh -c 'export EXPE_SAVE_FILE=./requests NODES_IP=127.0.0.1 TARGET_NODE_NAMES=node_3 IOT_LOCAL_PORT={{IOT_LOCAL_PORT}} OVERRIDE_FIRST_NODE_IP=127.0.0.1 OVERRIDE_FUNCTION_IP=127.0.0.1 ; just expe 127.0.0.1 {{localhost_ip}} c132ee95-5368-4bc8-9dfd-227eb77da5fc'
    cd ../testbed && nix develop .#testbed -c sh -c 'export EXPE_LOAD_FILE=./requests NODES_IP=127.0.0.1 TARGET_NODE_NAMES=node_3 IOT_LOCAL_PORT={{IOT_LOCAL_PORT}} OVERRIDE_FIRST_NODE_IP=127.0.0.1 OVERRIDE_FUNCTION_IP=127.0.0.1 ; just expe 127.0.0.1 {{localhost_ip}} c132ee95-5368-4bc8-9dfd-227eb77da5fc'

# Push container images o ghcr.
ghcr user +images:
    #!/usr/bin/env bash
    set -e
    function run_docker() {
        re="fog_node_(.*)"
        if [[ $1 =~ $re  ]]; then
            name="${BASH_REMATCH[1]}"
            $(nix build ".#$1" --print-out-paths --no-link --quiet) | gzip --fast | skopeo --insecure-policy copy docker-archive:/dev/stdin docker://ghcr.io/{{user}}/giraff:$name
        else
            $(nix build ".#$1" --print-out-paths --no-link --quiet) | gzip --fast | skopeo --insecure-policy copy docker-archive:/dev/stdin docker://ghcr.io/{{user}}/giraff:$1
        fi
    }

    export -f run_docker
    parallel --lb  run_docker ::: {{images}} "market"