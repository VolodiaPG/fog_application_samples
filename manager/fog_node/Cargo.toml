[package]
name = "fog_node"
version = "0.1.0"
edition = "2021"

[testing]
test-threads = 20

[features]
# Do not forget to run cargo2nix at each new features added

default = ["mimalloc"]
# Enable mimalloc
mimalloc = []
offline = ["model/offline", "helper/offline"]
# Enable jaeger
# Bid Computation methods
# Valuation made from a constant rate, give by an ENV variable
linear_rates = []
# Use quadratic rates from the ENV variables
quadratic_rates = []

# Placement methods
# Default placement
auction = []
# Enable the bottom up placement method (placing at Edge first)
edge_first = []
# Enable the bottom up placement method (placing at Edge first)
# While putting function the furthest possible first
edge_furthest = []
# # Cloud only allocation
# cloud_only = []
# # Cloud only allocation v2 (with more chatter between cloud nodes)
# cloud_only_v2 = []
# Edge-ward algorithm as described in https://arxiv.org/abs/1606.02007
edge_ward = []
# # Edge-ward algorithm as described in https://arxiv.org/abs/1606.02007
# # + Refuse functions if latency is expected not to be respected
# edge_ward_v2 = []
# Edge-ward algorithm as described in https://arxiv.org/abs/1606.02007
# + Refuse functions if latency is expected not to be respected
# + Tries to allocate the furthest first
edge_ward_v3 = []
# Gather all possible hosts, finding the ones that accept the sla,
# finding the 2 least cpu-utilized and choosing at random in between those 2
maxcpu = []
# Randomly chooses two nodes to explore, they return their utilisation
# Then the one with the lowest is chosen
mincpurandom = ["model/mincpurandom"]

[dependencies]
actix-web = "4.8"
actix-web-opentelemetry = "0.16"
anyhow = "1.0"
async-trait = "0.1.81"
backoff = { version = "0.4", features = ["tokio"] }
base64 = { version = "0.13", default-features = false, features = [
    "alloc", # for base64::decode_config and base64::encode_config
] }
bytes = "1.7"
chrono = "0.4"
dashmap = "6.0"
fast-math = "0.1"
futures = "0.3"
influxdb2 = "0.5"
influxdb2-derive = "0.1"
influxdb2-structmap = "0.2"
k8s-openapi = { version = "0.22", features = ["latest"] }
kube = { version = "0.93", features = ["client", "runtime"] }
lazy-regex = "3.1"
lazy_static = "1.4"
mimalloc = { version = "0.1", default-features = false }
num-rational = "0.4.2"
num-traits = "0.2"
nutype = "0.4"
opentelemetry = { version = "0.21" }
opentelemetry_sdk = { version = "0.21", features = [
    "rt-tokio",
], default-features = false}
opentelemetry-stdout = { version = "0.2.0", features = ["trace"] }
opentelemetry-jaeger = { version = "0.20", features = [
    "reqwest_collector_client",
    "rt-tokio",
], default-features = false}
rand = "0.8.5"
reqwest = { version = "0.12", features = ["json", "gzip"] }
reqwest-middleware = { version = "0.3", features = ["json"] }
reqwest-retry = { version= "0.6" }
reqwest-tracing = { version = "0.5", features = [
    "opentelemetry_0_21",
] }
ron = "0.8"
serde = { version = "1.0", features = ["derive", "rc"] }
serde_json = { version = "1.0", features = ["raw_value"] }
serde_with = "3.4"
surge-ping = "0.8"
tokio = { version = "1.39", features = ["full"] }
tracing = "0.1"
tracing-actix-web = { version = "0.7", features = [
    "opentelemetry_0_21",
]}
tracing-appender = "0.2"
tracing-forest = { version = "0.1", features = ["tokio"] }
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
tracing-opentelemetry = { version = "0.22" }
uom = { version = "0.36", default-features = false, features = [
    "f64",
    "rational64",
    "si",
    "autoconvert",
] }
uuid = { version = "1.2", features = ["v4", "fast-rng", "serde"] }

helper = { path = "../helper" }
helper_derive = { path = "../helper_derive" }
kube_metrics = { path = "../kube_metrics" }
model = { path = "../model" }
openfaas = { path = "../openfaas" }

[dev-dependencies]
rand = { version = "0.8.5", features = ["std_rng"] }
rand_distr = "0.4.3"
