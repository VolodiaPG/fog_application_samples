[package]
name = "fog_node"
version = "0.1.0"
edition = "2021"

[features]
# Do not forget to run cargo2nix at each new features added

default = ["mimalloc"]
# Enable mimalloc
mimalloc = []
# Enable jaeger
jaeger = [
    "opentelemetry",
    "opentelemetry_sdk",
    "opentelemetry-jaeger",
    "reqwest-tracing",
    "tracing-opentelemetry",
    "tracing-actix-web",
]

# Bid Computation methods
# Valuation made from a constant rate, give by an ENV variable
valuation_rates = []

# Placement methods
# Default placement
auction = []
# Enable the bottom up placement method (placing at Edge first)
edge_first = []
# Enable the bottom up placement method (placing at Edge first)
# While putting function the furthest possible first
edge_first_v2 = []
# # Cloud only allocation
# cloud_only = []
# # Cloud only allocation v2 (with more chatter between cloud nodes)
# cloud_only_v2 = []
# Edge-ward algorithm as described in https://arxiv.org/abs/1606.02007
edge_ward = []
# # Edge-ward algorithm as described in https://arxiv.org/abs/1606.02007
# # + Refuse functions if latency is expected not to be respected
# edge_ward_v2 = []
# Edge-ward algorithm as described in https://arxiv.org/abs/1606.02007
# + Refuse functions if latency is expected not to be respected
# + Tries to allocate the furthest first
edge_ward_v3 = []

[dependencies]
actix-web = "4.4.0"
actix-web-opentelemetry = "0.16.0"
anyhow = "1.0.66"
base64 = { version = "0.13.1", default-features = false, features = [
    "alloc", # for base64::decode_config and base64::encode_config
] }
bytes = "1.2.0"
chrono = "0.4.23"
dashmap = "5.4.0"
fast-math = "0.1.1"
futures = "0.3.28"
influxdb2 = "0.4.2"
influxdb2-derive = "0.1.1"
influxdb2-structmap = "0.2"
num-traits = "0.2"
nutype = "0.4.0-beta.2"
k8s-openapi = { version = "0.20.0", features = ["latest"] }
kube = { version = "0.87.0", features = ["client", "runtime"] }
lazy-regex = "3.1.0"
lazy_static = "1.4.0"
mimalloc = { version = "0.1.32", default-features = false }
opentelemetry = { version = "0.21.0", optional = true }
opentelemetry_sdk = { version = "0.21.1", features = [
    "rt-tokio",
], default-features = false, optional = true }
opentelemetry-jaeger = { version = "0.20.0", features = [
    "reqwest_collector_client",
    "rt-tokio",
], default-features = false, optional = true }
reqwest = { version = "0.11.22", features = ["json", "gzip"] }
reqwest-middleware = { git = "https://github.com/jtescher/reqwest-middleware", rev = "2538936", package = "reqwest-middleware" }
# reqwest-tracing = { version = "0.4.6", features = [
#     "opentelemetry_0_20",
# ], optional = true }
reqwest-tracing = { git = "https://github.com/jtescher/reqwest-middleware", rev = "2538936", package = "reqwest-tracing", features = [
    "opentelemetry_0_21",
], optional = true }
ron = "0.8.0"
serde = { version = "1.0.147", features = ["derive", "rc"] }
serde_json = { version = "1.0.87", features = ["raw_value"] }
serde_with = "3.4.0"
surge-ping = "0.8.0"
tokio = { version = "1.21.2", features = ["full"] }
tokio-cron-scheduler = "0.9.4"
tracing = "0.1.37"
tracing-actix-web = { version = "0.7.9", features = [
    "opentelemetry_0_21",
], optional = true }
tracing-appender = "0.2"
tracing-forest = { version = "0.1.5", features = ["tokio"] }
tracing-log = "0.2.0"
tracing-subscriber = { version = "0.3.16", features = ["env-filter"] }
tracing-opentelemetry = { version = "0.22.0", optional = true }
uom = { version = "0.34.0", default-features = false, features = [
    "f64",
    "si",
    "autoconvert",
] }
uuid = { version = "1.2.2", features = ["v4", "fast-rng", "serde"] }

helper = { path = "../helper" }
helper_derive = { path = "../helper_derive" }
kube_metrics = { path = "../kube_metrics" }
model = { path = "../model" }
openfaas = { path = "../openfaas" }
