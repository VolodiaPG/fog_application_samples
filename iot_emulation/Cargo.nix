# This file was @generated by cargo2nix 0.11.0.
# It is not intended to be manually edited.
args @ {
  release ? true,
  rootFeatures ? [
    "iot_emulation/default"
  ],
  rustPackages,
  buildRustPackages,
  hostPlatform,
  hostPlatformCpu ? null,
  hostPlatformFeatures ? [],
  target ? null,
  codegenOpts ? null,
  profileOpts ? null,
  rustcLinkFlags ? null,
  rustcBuildFlags ? null,
  mkRustCrate,
  rustLib,
  lib,
  workspaceSrc,
}: let
  workspaceSrc =
    if args.workspaceSrc == null
    then ./.
    else args.workspaceSrc;
in let
  inherit (rustLib) fetchCratesIo fetchCrateLocal fetchCrateGit fetchCrateAlternativeRegistry expandFeatures decideProfile genDrvsByProfile;
  profilesByName = {
    release = builtins.fromTOML "codegen-units = 1\nlto = true\nopt-level = 3\nstrip = true\n";
  };
  rootFeatures' = expandFeatures rootFeatures;
  overridableMkRustCrate = f: let
    drvs = genDrvsByProfile profilesByName ({
      profile,
      profileName,
    }:
      mkRustCrate ({inherit release profile hostPlatformCpu hostPlatformFeatures target profileOpts codegenOpts rustcLinkFlags rustcBuildFlags;} // (f profileName)));
  in
    {
      compileMode ? null,
      profileName ? decideProfile compileMode release,
    }: let
      drv = drvs.${profileName};
    in
      if compileMode == null
      then drv
      else drv.override {inherit compileMode;};
in {
  cargo2nixVersion = "0.11.0";
  workspace = {
    iot_emulation = rustPackages.unknown.iot_emulation."0.1.0";
  };
  "registry+https://github.com/rust-lang/crates.io-index".actix-codec."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "actix-codec";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "57a7559404a7f3573127aab53c08ce37a6c6a315c374a31070f3c91cd1b4a7fe";
    };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" {inherit profileName;};
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.4.0" {inherit profileName;};
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.28" {inherit profileName;};
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.28" {inherit profileName;};
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" {inherit profileName;};
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" {inherit profileName;};
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.9" {inherit profileName;};
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.28.2" {inherit profileName;};
      tokio_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.3" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".actix-http."3.2.2" = overridableMkRustCrate (profileName: rec {
    name = "actix-http";
    version = "3.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "0c83abf9903e1f0ad9973cc4f7b9767fd5a03a583f51a5b7a339e07987cd2724";
    };
    features = builtins.concatLists [
      ["__compress"]
      ["base64"]
      ["brotli"]
      ["compress-brotli"]
      ["compress-gzip"]
      ["compress-zstd"]
      ["default"]
      ["flate2"]
      ["h2"]
      ["http2"]
      ["local-channel"]
      ["rand"]
      ["sha1"]
      ["ws"]
      ["zstd"]
    ];
    dependencies = {
      actix_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-codec."0.5.0" {inherit profileName;};
      actix_rt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-rt."2.7.0" {inherit profileName;};
      actix_service = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-service."2.0.2" {inherit profileName;};
      actix_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-utils."3.0.1" {inherit profileName;};
      ahash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.7.6" {inherit profileName;};
      base64 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.0" {inherit profileName;};
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" {inherit profileName;};
      brotli = rustPackages."registry+https://github.com/rust-lang/crates.io-index".brotli."3.3.4" {inherit profileName;};
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.4.0" {inherit profileName;};
      bytestring = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytestring."1.2.0" {inherit profileName;};
      derive_more = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.17" {profileName = "__noProfile";};
      encoding_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".encoding_rs."0.8.31" {inherit profileName;};
      flate2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.25" {inherit profileName;};
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.28" {inherit profileName;};
      h2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".h2."0.3.13" {inherit profileName;};
      http = rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.8" {inherit profileName;};
      httparse = rustPackages."registry+https://github.com/rust-lang/crates.io-index".httparse."1.7.1" {inherit profileName;};
      httpdate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".httpdate."1.0.2" {inherit profileName;};
      itoa = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.2" {inherit profileName;};
      language_tags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".language-tags."0.3.2" {inherit profileName;};
      local_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".local-channel."0.1.3" {inherit profileName;};
      mime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime."0.3.16" {inherit profileName;};
      percent_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" {inherit profileName;};
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.9" {inherit profileName;};
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" {inherit profileName;};
      sha1 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha1."0.10.5" {inherit profileName;};
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.9.0" {inherit profileName;};
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.37" {inherit profileName;};
      zstd = rustPackages."registry+https://github.com/rust-lang/crates.io-index".zstd."0.11.2+zstd.1.5.2" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".actix-macros."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "actix-macros";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "465a6172cf69b960917811022d8f29bc0b7fa1398bc4f78b3c466673db1213b6";
    };
    dependencies = {
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" {inherit profileName;};
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".actix-router."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "actix-router";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "d66ff4d247d2b160861fa2866457e85706833527840e4133f8f49aa423a38799";
    };
    features = builtins.concatLists [
      ["default"]
      ["http"]
    ];
    dependencies = {
      bytestring = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytestring."1.2.0" {inherit profileName;};
      http = rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.8" {inherit profileName;};
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.8.4" {inherit profileName;};
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" {inherit profileName;};
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.37" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".actix-rt."2.7.0" = overridableMkRustCrate (profileName: rec {
    name = "actix-rt";
    version = "2.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "7ea16c295198e958ef31930a6ef37d0fb64e9ca3b6116e6b93a8bdae96ee1000";
    };
    dependencies = {
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.28" {inherit profileName;};
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.28.2" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".actix-server."2.1.1" = overridableMkRustCrate (profileName: rec {
    name = "actix-server";
    version = "2.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "0da34f8e659ea1b077bb4637948b815cd3768ad5a188fdcd74ff4d84240cd824";
    };
    features = builtins.concatLists [
      ["default"]
    ];
    dependencies = {
      actix_rt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-rt."2.7.0" {inherit profileName;};
      actix_service = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-service."2.0.2" {inherit profileName;};
      actix_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-utils."3.0.1" {inherit profileName;};
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.28" {inherit profileName;};
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.28" {inherit profileName;};
      mio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio."0.8.4" {inherit profileName;};
      num_cpus = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.14.0" {inherit profileName;};
      socket2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.4.9" {inherit profileName;};
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.28.2" {inherit profileName;};
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.37" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".actix-service."2.0.2" = overridableMkRustCrate (profileName: rec {
    name = "actix-service";
    version = "2.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "3b894941f818cfdc7ccc4b9e60fa7e53b5042a2e8567270f9147d5591893373a";
    };
    dependencies = {
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.28" {inherit profileName;};
      paste = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".paste."1.0.9" {profileName = "__noProfile";};
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.9" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".actix-utils."3.0.1" = overridableMkRustCrate (profileName: rec {
    name = "actix-utils";
    version = "3.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "88a1dcdff1466e3c2488e1cb5c36a71822750ad43839937f85d2f4d9f8b705d8";
    };
    dependencies = {
      local_waker = rustPackages."registry+https://github.com/rust-lang/crates.io-index".local-waker."0.1.3" {inherit profileName;};
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.9" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".actix-web."4.2.1" = overridableMkRustCrate (profileName: rec {
    name = "actix-web";
    version = "4.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "d48f7b6534e06c7bfc72ee91db7917d4af6afe23e7d223b51e68fffbb21e96b9";
    };
    features = builtins.concatLists [
      ["__compress"]
      ["actix-macros"]
      ["actix-web-codegen"]
      ["compress-brotli"]
      ["compress-gzip"]
      ["compress-zstd"]
      ["cookie"]
      ["cookies"]
      ["default"]
      ["macros"]
    ];
    dependencies = {
      actix_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-codec."0.5.0" {inherit profileName;};
      actix_http = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-http."3.2.2" {inherit profileName;};
      actix_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-macros."0.2.3" {profileName = "__noProfile";};
      actix_router = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-router."0.5.1" {inherit profileName;};
      actix_rt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-rt."2.7.0" {inherit profileName;};
      actix_server = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-server."2.1.1" {inherit profileName;};
      actix_service = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-service."2.0.2" {inherit profileName;};
      actix_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-utils."3.0.1" {inherit profileName;};
      actix_web_codegen = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-web-codegen."4.1.0" {profileName = "__noProfile";};
      ahash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.7.6" {inherit profileName;};
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.4.0" {inherit profileName;};
      bytestring = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytestring."1.2.0" {inherit profileName;};
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {inherit profileName;};
      cookie = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cookie."0.16.1" {inherit profileName;};
      derive_more = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.17" {profileName = "__noProfile";};
      encoding_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".encoding_rs."0.8.31" {inherit profileName;};
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.28" {inherit profileName;};
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.28" {inherit profileName;};
      http = rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.8" {inherit profileName;};
      itoa = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.2" {inherit profileName;};
      language_tags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".language-tags."0.3.2" {inherit profileName;};
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" {inherit profileName;};
      mime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime."0.3.16" {inherit profileName;};
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" {inherit profileName;};
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.9" {inherit profileName;};
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.8.4" {inherit profileName;};
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" {inherit profileName;};
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.82" {inherit profileName;};
      serde_urlencoded = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_urlencoded."0.7.1" {inherit profileName;};
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.9.0" {inherit profileName;};
      socket2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.4.9" {inherit profileName;};
      time = rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.17" {inherit profileName;};
      url = rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.2.2" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".actix-web-codegen."4.1.0" = overridableMkRustCrate (profileName: rec {
    name = "actix-web-codegen";
    version = "4.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "1fa9362663c8643d67b2d5eafba49e4cb2c8a053a29ed00a0bea121f17c76b13";
    };
    dependencies = {
      actix_router = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-router."0.5.1" {inherit profileName;};
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" {inherit profileName;};
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" {inherit profileName;};
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".actix-web-opentelemetry."0.13.0" = overridableMkRustCrate (profileName: rec {
    name = "actix-web-opentelemetry";
    version = "0.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "aaa592a5b9b3d96101434bca1024c6da6c23630163aec485428e613cd7100dcf";
    };
    dependencies = {
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger"
        then "actix_http"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-http."3.2.2" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger"
        then "actix_web"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-web."4.2.1" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger"
        then "futures_util"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.28" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger"
        then "opentelemetry"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".opentelemetry."0.18.0" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger"
        then "opentelemetry_semantic_conventions"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".opentelemetry-semantic-conventions."0.10.0" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger"
        then "serde"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".adler."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "adler";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".ahash."0.7.6" = overridableMkRustCrate (profileName: rec {
    name = "ahash";
    version = "0.7.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "fcb51a0695d8f838b1ee009b3fbf66bda078cd64590202a864a8f3e8c4315c47";
    };
    features = builtins.concatLists [
      ["default"]
      ["std"]
    ];
    dependencies = {
      ${
        if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "windows" || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "solaris" || hostPlatform.parsed.kernel.name == "illumos" || hostPlatform.parsed.kernel.name == "fuchsia" || hostPlatform.parsed.kernel.name == "redox" || hostPlatform.parsed.kernel.name == "cloudabi" || hostPlatform.parsed.kernel.name == "haiku" || hostPlatform.parsed.kernel.name == "vxworks" || hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi"
        then "getrandom"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.7" {inherit profileName;};
      ${
        if !((hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l") && hostPlatform.parsed.kernel.name == "none")
        then "once_cell"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" {inherit profileName;};
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" {profileName = "__noProfile";};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".aho-corasick."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "aho-corasick";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "43f6cb1bf222025340178f382c426f13757b2960e89779dfcb319c32542a5a41";
    };
    features = builtins.concatLists [
      ["default"]
      ["perf-literal"]
      ["std"]
    ];
    dependencies = {
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".alloc-no-stdlib."2.0.4" = overridableMkRustCrate (profileName: rec {
    name = "alloc-no-stdlib";
    version = "2.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "cc7bb162ec39d46ab1ca8c77bf72e890535becd1751bb45f64c597edb4c8c6b3";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".alloc-stdlib."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "alloc-stdlib";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "94fb8275041c72129eb51b7d0322c29b8387a0386127718b096429201a5d6ece";
    };
    dependencies = {
      alloc_no_stdlib = rustPackages."registry+https://github.com/rust-lang/crates.io-index".alloc-no-stdlib."2.0.4" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".android_system_properties."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "android_system_properties";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311";
    };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".ansi_term."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "ansi_term";
    version = "0.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2";
    };
    dependencies = {
      ${
        if hostPlatform.parsed.kernel.name == "windows"
        then "winapi"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.71" = overridableMkRustCrate (profileName: rec {
    name = "anyhow";
    version = "1.0.71";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "9c7d0618f0e0b7e8ff11427422b64564d5fb0be1940354bfe2e0529b18a9d9b8";
    };
    features = builtins.concatLists [
      ["default"]
      ["std"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".async-compression."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "async-compression";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "5b0122885821398cc923ece939e24d1056a2384ee719432397fa9db87230ff11";
    };
    features = builtins.concatLists [
      ["flate2"]
      ["gzip"]
      ["tokio"]
    ];
    dependencies = {
      flate2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.25" {inherit profileName;};
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.28" {inherit profileName;};
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" {inherit profileName;};
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.9" {inherit profileName;};
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.28.2" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".async-stream."0.3.5" = overridableMkRustCrate (profileName: rec {
    name = "async-stream";
    version = "0.3.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "cd56dd203fef61ac097dd65721a419ddccb106b2d2b70ba60a6b529f03961a51";
    };
    dependencies = {
      async_stream_impl = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-stream-impl."0.3.5" {profileName = "__noProfile";};
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.28" {inherit profileName;};
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.9" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".async-stream-impl."0.3.5" = overridableMkRustCrate (profileName: rec {
    name = "async-stream-impl";
    version = "0.3.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "16e62a023e7c117e27523144c5d2459f4397fcc3cab0085af8e2224f643a0193";
    };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" {inherit profileName;};
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" {inherit profileName;};
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.18" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.59" = overridableMkRustCrate (profileName: rec {
    name = "async-trait";
    version = "0.1.59";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "31e6e93155431f3931513b243d371981bb2770112b370c82745a1d19d2f99364";
    };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" {inherit profileName;};
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" {inherit profileName;};
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "autocfg";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".base64."0.13.0" = overridableMkRustCrate (profileName: rec {
    name = "base64";
    version = "0.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "904dfeac50f3cdaba28fc6f57fdcddb75f49ed61346676a78c4ffe55877802fd";
    };
    features = builtins.concatLists [
      ["alloc"]
      ["default"]
      ["std"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".base64."0.21.2" = overridableMkRustCrate (profileName: rec {
    name = "base64";
    version = "0.21.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "604178f6c5c21f02dc555784810edfb88d34ac2c73b2eae109655649ee73ce3d";
    };
    features = builtins.concatLists [
      ["default"]
      ["std"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" = overridableMkRustCrate (profileName: rec {
    name = "bitflags";
    version = "1.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a";
    };
    features = builtins.concatLists [
      ["default"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.10.3" = overridableMkRustCrate (profileName: rec {
    name = "block-buffer";
    version = "0.10.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "69cce20737498f97b993470a6e536b8523f0af7892a4f928cceb1ac5e52ebe7e";
    };
    dependencies = {
      generic_array = rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.6" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".brotli."3.3.4" = overridableMkRustCrate (profileName: rec {
    name = "brotli";
    version = "3.3.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "a1a0b1dbcc8ae29329621f8d4f0d835787c1c38bb1401979b49d13b0b305ff68";
    };
    features = builtins.concatLists [
      ["alloc-stdlib"]
      ["default"]
      ["ffi-api"]
      ["std"]
    ];
    dependencies = {
      alloc_no_stdlib = rustPackages."registry+https://github.com/rust-lang/crates.io-index".alloc-no-stdlib."2.0.4" {inherit profileName;};
      alloc_stdlib = rustPackages."registry+https://github.com/rust-lang/crates.io-index".alloc-stdlib."0.2.2" {inherit profileName;};
      brotli_decompressor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".brotli-decompressor."2.3.2" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".brotli-decompressor."2.3.2" = overridableMkRustCrate (profileName: rec {
    name = "brotli-decompressor";
    version = "2.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "59ad2d4653bf5ca36ae797b1f4bb4dbddb60ce49ca4aed8a2ce4829f60425b80";
    };
    features = builtins.concatLists [
      ["alloc-stdlib"]
      ["std"]
    ];
    dependencies = {
      alloc_no_stdlib = rustPackages."registry+https://github.com/rust-lang/crates.io-index".alloc-no-stdlib."2.0.4" {inherit profileName;};
      alloc_stdlib = rustPackages."registry+https://github.com/rust-lang/crates.io-index".alloc-stdlib."0.2.2" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.10.0" = overridableMkRustCrate (profileName: rec {
    name = "bumpalo";
    version = "3.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "37ccbd214614c6783386c1af30caf03192f17891059cecc394b4fb119e363de3";
    };
    features = builtins.concatLists [
      ["default"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" = overridableMkRustCrate (profileName: rec {
    name = "byteorder";
    version = "1.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610";
    };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger") "default")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger") "std")
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".bytes."1.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bytes";
    version = "1.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "89b2fd2a0dcf38d7971e2194b6b6eebab45ae01067456a7fd93d5547a61b70be";
    };
    features = builtins.concatLists [
      ["default"]
      ["std"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".bytestring."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "bytestring";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "f7f83e57d9154148e355404702e2694463241880b939570d7c97c014da7a69a1";
    };
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.4.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" = overridableMkRustCrate (profileName: rec {
    name = "cc";
    version = "1.0.73";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "2fff2a6927b3bb87f9595d67196a70493f627687a71d87a0d692242c33f58c11";
    };
    features = builtins.concatLists [
      ["jobserver"]
      ["parallel"]
    ];
    dependencies = {
      jobserver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jobserver."0.1.25" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "cfg-if";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.23" = overridableMkRustCrate (profileName: rec {
    name = "chrono";
    version = "0.4.23";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "16b0a3d9ed01224b22057780a37bb8c5dbfe1be8ba48678e7bf57ec4b385411f";
    };
    features = builtins.concatLists [
      ["alloc"]
      ["clock"]
      ["default"]
      ["iana-time-zone"]
      ["js-sys"]
      ["oldtime"]
      ["serde"]
      ["std"]
      ["time"]
      ["wasm-bindgen"]
      ["wasmbind"]
      ["winapi"]
    ];
    dependencies = {
      iana_time_zone = rustPackages."registry+https://github.com/rust-lang/crates.io-index".iana-time-zone."0.1.53" {inherit profileName;};
      ${
        if hostPlatform.parsed.cpu.name == "wasm32" && !(hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi")
        then "js_sys"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.58" {inherit profileName;};
      num_integer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.45" {inherit profileName;};
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" {inherit profileName;};
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" {inherit profileName;};
      time = rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.1.44" {inherit profileName;};
      ${
        if hostPlatform.parsed.cpu.name == "wasm32" && !(hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi")
        then "wasm_bindgen"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.81" {inherit profileName;};
      ${
        if hostPlatform.isWindows
        then "winapi"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".codespan-reporting."0.11.1" = overridableMkRustCrate (profileName: rec {
    name = "codespan-reporting";
    version = "0.11.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "3538270d33cc669650c4b093848450d380def10c331d38c768e34cac80576e6e";
    };
    dependencies = {
      termcolor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".termcolor."1.1.3" {inherit profileName;};
      unicode_width = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.10" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".convert_case."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "convert_case";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "6245d59a3e82a7fc217c5828a6692dbc6dfb63a0c8c90495621f7b9d79704a0e";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".convert_case."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "convert_case";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "ec182b0ca2f35d8fc196cf3404988fd8b8c739a4d270ff118a398feb0cbec1ca";
    };
    dependencies = {
      unicode_segmentation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-segmentation."1.10.1" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".cookie."0.16.1" = overridableMkRustCrate (profileName: rec {
    name = "cookie";
    version = "0.16.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "344adc371239ef32293cb1c4fe519592fcf21206c79c02854320afcdf3ab4917";
    };
    features = builtins.concatLists [
      ["percent-encode"]
      ["percent-encoding"]
    ];
    dependencies = {
      percent_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" {inherit profileName;};
      time = rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.17" {inherit profileName;};
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" {profileName = "__noProfile";};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.3" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation";
    version = "0.9.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "194a7a9e6de53fa55116934067c844d9d749312f75c6f6d0980e8c252f8c2146";
    };
    dependencies = {
      core_foundation_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.3" {inherit profileName;};
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.3" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation-sys";
    version = "0.8.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "5827cebf4670468b8772dd191856768aedcb1b0278a04f989f7766351917b9dc";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.5" = overridableMkRustCrate (profileName: rec {
    name = "cpufeatures";
    version = "0.2.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "28d997bd5e24a5928dd43e46dc529867e207907fe0b239c3477d924f7f2ca320";
    };
    dependencies = {
      ${
        if hostPlatform.config == "aarch64-apple-darwin" || hostPlatform.config == "aarch64-linux-android" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.kernel.name == "linux"
        then "libc"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.3.2" = overridableMkRustCrate (profileName: rec {
    name = "crc32fast";
    version = "1.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "b540bd8bc810d3885c6ea91e2018302f68baba2129ab3e88f32389ee9370880d";
    };
    features = builtins.concatLists [
      ["default"]
      ["std"]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.6" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-channel";
    version = "0.5.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "c2dd04ddaf88237dc3b8d8f9a3c1004b506b54b3313403944054d23c0870c521";
    };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry") "crossbeam-utils")
      (lib.optional (rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry") "default")
      (lib.optional (rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry") "std")
    ];
    dependencies = {
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "cfg_if"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "crossbeam_utils"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.14" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-queue."0.3.8" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-queue";
    version = "0.3.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "d1cfb3ea8a53f37c40dea2c7bedcbd88bdfae54f5e2175d6ecaff1c988353add";
    };
    features = builtins.concatLists [
      ["alloc"]
      ["std"]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {inherit profileName;};
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.14" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.14" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-utils";
    version = "0.8.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "4fb766fa798726286dbbb842f174001dab8abc7b627a1dd86e0b7222a95d929f";
    };
    features = builtins.concatLists [
      ["std"]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".crypto-common."0.1.6" = overridableMkRustCrate (profileName: rec {
    name = "crypto-common";
    version = "0.1.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3";
    };
    features = builtins.concatLists [
      ["std"]
    ];
    dependencies = {
      generic_array = rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.6" {inherit profileName;};
      typenum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.16.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".csv."1.2.2" = overridableMkRustCrate (profileName: rec {
    name = "csv";
    version = "1.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "626ae34994d3d8d668f4269922248239db4ae42d538b14c398b74a52208e8086";
    };
    dependencies = {
      csv_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".csv-core."0.1.10" {inherit profileName;};
      itoa = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.2" {inherit profileName;};
      ryu = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.10" {inherit profileName;};
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".csv-core."0.1.10" = overridableMkRustCrate (profileName: rec {
    name = "csv-core";
    version = "0.1.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "2b2466559f260f48ad25fe6317b3c8dac77b5bdb5763ac7d9d6103530663bc90";
    };
    features = builtins.concatLists [
      ["default"]
    ];
    dependencies = {
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".cxx."1.0.82" = overridableMkRustCrate (profileName: rec {
    name = "cxx";
    version = "1.0.82";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "d4a41a86530d0fe7f5d9ea779916b7cadd2d4f9add748b99c2c029cbbdfaf453";
    };
    features = builtins.concatLists [
      ["alloc"]
      ["default"]
      ["std"]
    ];
    dependencies = {
      cxxbridge_macro = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cxxbridge-macro."1.0.82" {profileName = "__noProfile";};
      link_cplusplus = rustPackages."registry+https://github.com/rust-lang/crates.io-index".link-cplusplus."1.0.7" {inherit profileName;};
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" {profileName = "__noProfile";};
      cxxbridge_flags = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cxxbridge-flags."1.0.82" {profileName = "__noProfile";};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".cxx-build."1.0.82" = overridableMkRustCrate (profileName: rec {
    name = "cxx-build";
    version = "1.0.82";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "06416d667ff3e3ad2df1cd8cd8afae5da26cf9cec4d0825040f88b5ca659a2f0";
    };
    dependencies = {
      cc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" {inherit profileName;};
      codespan_reporting = rustPackages."registry+https://github.com/rust-lang/crates.io-index".codespan-reporting."0.11.1" {inherit profileName;};
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" {inherit profileName;};
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" {inherit profileName;};
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" {inherit profileName;};
      scratch = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scratch."1.0.2" {inherit profileName;};
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".cxxbridge-flags."1.0.82" = overridableMkRustCrate (profileName: rec {
    name = "cxxbridge-flags";
    version = "1.0.82";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "820a9a2af1669deeef27cb271f476ffd196a2c4b6731336011e0ba63e2c7cf71";
    };
    features = builtins.concatLists [
      ["default"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".cxxbridge-macro."1.0.82" = overridableMkRustCrate (profileName: rec {
    name = "cxxbridge-macro";
    version = "1.0.82";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "a08a6e2fcc370a089ad3b4aaf54db3b1b4cee38ddabce5896b33eb693275f470";
    };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" {inherit profileName;};
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" {inherit profileName;};
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".darling."0.20.1" = overridableMkRustCrate (profileName: rec {
    name = "darling";
    version = "0.20.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "0558d22a7b463ed0241e993f76f09f30b126687447751a8638587b864e4b3944";
    };
    features = builtins.concatLists [
      ["default"]
      ["suggestions"]
    ];
    dependencies = {
      darling_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_core."0.20.1" {inherit profileName;};
      darling_macro = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_macro."0.20.1" {profileName = "__noProfile";};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".darling_core."0.20.1" = overridableMkRustCrate (profileName: rec {
    name = "darling_core";
    version = "0.20.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "ab8bfa2e259f8ee1ce5e97824a3c55ec4404a0d772ca7fa96bf19f0752a046eb";
    };
    features = builtins.concatLists [
      ["strsim"]
      ["suggestions"]
    ];
    dependencies = {
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" {inherit profileName;};
      ident_case = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ident_case."1.0.1" {inherit profileName;};
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" {inherit profileName;};
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" {inherit profileName;};
      strsim = rustPackages."registry+https://github.com/rust-lang/crates.io-index".strsim."0.10.0" {inherit profileName;};
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.18" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".darling_macro."0.20.1" = overridableMkRustCrate (profileName: rec {
    name = "darling_macro";
    version = "0.20.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "29a358ff9f12ec09c3e61fef9b5a9902623a695a46a917b07f269bff1445611a";
    };
    dependencies = {
      darling_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_core."0.20.1" {inherit profileName;};
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" {inherit profileName;};
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.18" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".dashmap."4.0.2" = overridableMkRustCrate (profileName: rec {
    name = "dashmap";
    version = "4.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "e77a43b28d0668df09411cb0bc9a8c2adc40f9a048afe863e05fd43251e8e39c";
    };
    features = builtins.concatLists [
      ["default"]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {inherit profileName;};
      num_cpus = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.14.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".dashmap."5.4.0" = overridableMkRustCrate (profileName: rec {
    name = "dashmap";
    version = "5.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "907076dfda823b0b36d2a1bb5f90c96660a5bbcd7729e10727f07858f22c4edc";
    };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {inherit profileName;};
      hashbrown = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.12.3" {inherit profileName;};
      lock_api = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.9" {inherit profileName;};
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" {inherit profileName;};
      parking_lot_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.9.3" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.17" = overridableMkRustCrate (profileName: rec {
    name = "derive_more";
    version = "0.99.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "4fb810d30a7c1953f91334de7244731fc3f3c10d7fe163338a35b9f640960321";
    };
    features = builtins.concatLists [
      ["add"]
      ["add_assign"]
      ["as_mut"]
      ["as_ref"]
      ["constructor"]
      ["convert_case"]
      ["default"]
      ["deref"]
      ["deref_mut"]
      ["display"]
      ["error"]
      ["from"]
      ["from_str"]
      ["index"]
      ["index_mut"]
      ["into"]
      ["into_iterator"]
      ["is_variant"]
      ["iterator"]
      ["mul"]
      ["mul_assign"]
      ["not"]
      ["rustc_version"]
      ["sum"]
      ["try_into"]
      ["unwrap"]
    ];
    dependencies = {
      convert_case = rustPackages."registry+https://github.com/rust-lang/crates.io-index".convert_case."0.4.0" {inherit profileName;};
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" {inherit profileName;};
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" {inherit profileName;};
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" {inherit profileName;};
    };
    buildDependencies = {
      rustc_version = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.4.0" {profileName = "__noProfile";};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".digest."0.10.6" = overridableMkRustCrate (profileName: rec {
    name = "digest";
    version = "0.10.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "8168378f4e5023e7218c89c891c0fd8ecdb5e5e4f18cb78f38cf245dd021e76f";
    };
    features = builtins.concatLists [
      ["alloc"]
      ["block-buffer"]
      ["core-api"]
      ["default"]
      ["std"]
    ];
    dependencies = {
      block_buffer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.10.3" {inherit profileName;};
      crypto_common = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-common."0.1.6" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".doc-comment."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "doc-comment";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "fea41bba32d969b513997752735605054bc0dfa92b4c56bf1189f2e174be7a10";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".dotenv."0.15.0" = overridableMkRustCrate (profileName: rec {
    name = "dotenv";
    version = "0.15.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "77c90badedccf4105eca100756a0b1289e191f6fcbdadd3cee1d2f614f97da8f";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".either."1.8.1" = overridableMkRustCrate (profileName: rec {
    name = "either";
    version = "1.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "7fcaabb2fef8c910e7f4c7ce9f67a1283a1715879a7c230ca9d6d1ae31f16d91";
    };
    features = builtins.concatLists [
      ["use_std"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".encoding_rs."0.8.31" = overridableMkRustCrate (profileName: rec {
    name = "encoding_rs";
    version = "0.8.31";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "9852635589dc9f9ea1b6fe9f05b50ef208c85c834a562f0c6abb1c475736ec2b";
    };
    features = builtins.concatLists [
      ["alloc"]
      ["default"]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".fallible-iterator."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "fallible-iterator";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "4443176a9f2c162692bd3d352d745ef9413eec5782a80d8fd6f8a1ac692a07f7";
    };
    features = builtins.concatLists [
      ["default"]
      ["std"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".fastrand."1.7.0" = overridableMkRustCrate (profileName: rec {
    name = "fastrand";
    version = "1.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "c3fcf0cee53519c866c09b5de1f6c56ff9d647101f81c1964fa632e148896cdf";
    };
    dependencies = {
      ${
        if hostPlatform.parsed.cpu.name == "wasm32"
        then "instant"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.25" = overridableMkRustCrate (profileName: rec {
    name = "flate2";
    version = "1.0.25";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "a8a2db397cb1c8772f31494cb8917e48cd1e64f0fa7efac59fbd741a0a8ce841";
    };
    features = builtins.concatLists [
      ["default"]
      ["miniz_oxide"]
      ["rust_backend"]
    ];
    dependencies = {
      crc32fast = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.3.2" {inherit profileName;};
      miniz_oxide = rustPackages."registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.6.2" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" = overridableMkRustCrate (profileName: rec {
    name = "fnv";
    version = "1.0.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1";
    };
    features = builtins.concatLists [
      ["default"]
      ["std"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "foreign-types";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1";
    };
    dependencies = {
      foreign_types_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types-shared."0.1.1" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".foreign-types-shared."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "foreign-types-shared";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "form_urlencoded";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "5fc25a87fa4fd2094bffb06925852034d90a17f0d1e05197d4956d3555752191";
    };
    dependencies = {
      matches = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matches."0.1.9" {inherit profileName;};
      percent_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".futures."0.3.28" = overridableMkRustCrate (profileName: rec {
    name = "futures";
    version = "0.3.28";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "23342abe12aba583913b2e62f22225ff9c950774065e4bfb61a19cd9770fec40";
    };
    features = builtins.concatLists [
      ["alloc"]
      ["async-await"]
      ["default"]
      ["executor"]
      ["futures-executor"]
      ["std"]
    ];
    dependencies = {
      futures_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.28" {inherit profileName;};
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.28" {inherit profileName;};
      futures_executor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-executor."0.3.28" {inherit profileName;};
      futures_io = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.28" {inherit profileName;};
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.28" {inherit profileName;};
      futures_task = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.28" {inherit profileName;};
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.28" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.28" = overridableMkRustCrate (profileName: rec {
    name = "futures-channel";
    version = "0.3.28";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "955518d47e09b25bbebc7a18df10b81f0c766eaf4c4f1cccef2fca5f2a4fb5f2";
    };
    features = builtins.concatLists [
      ["alloc"]
      ["default"]
      ["futures-sink"]
      ["sink"]
      ["std"]
    ];
    dependencies = {
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.28" {inherit profileName;};
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.28" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.28" = overridableMkRustCrate (profileName: rec {
    name = "futures-core";
    version = "0.3.28";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "4bca583b7e26f571124fe5b7561d49cb2868d79116cfa0eefce955557c6fee8c";
    };
    features = builtins.concatLists [
      ["alloc"]
      ["default"]
      ["std"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".futures-executor."0.3.28" = overridableMkRustCrate (profileName: rec {
    name = "futures-executor";
    version = "0.3.28";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "ccecee823288125bd88b4d7f565c9e58e41858e47ab72e8ea2d64e93624386e0";
    };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry") "default")
      ["std"]
    ];
    dependencies = {
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.28" {inherit profileName;};
      futures_task = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.28" {inherit profileName;};
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.28" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.28" = overridableMkRustCrate (profileName: rec {
    name = "futures-io";
    version = "0.3.28";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "4fff74096e71ed47f8e023204cfd0aa1289cd54ae5430a9523be060cdb849964";
    };
    features = builtins.concatLists [
      ["std"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".futures-macro."0.3.28" = overridableMkRustCrate (profileName: rec {
    name = "futures-macro";
    version = "0.3.28";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "89ca545a94061b6365f2c7355b4b32bd20df3ff95f02da9329b34ccc3bd6ee72";
    };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" {inherit profileName;};
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" {inherit profileName;};
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.18" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.28" = overridableMkRustCrate (profileName: rec {
    name = "futures-sink";
    version = "0.3.28";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "f43be4fe21a13b9781a69afa4985b0f6ee0e1afab2c6f454a8cf30e2b2237b6e";
    };
    features = builtins.concatLists [
      ["alloc"]
      ["default"]
      ["std"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.28" = overridableMkRustCrate (profileName: rec {
    name = "futures-task";
    version = "0.3.28";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "76d3d132be6c0e6aa1534069c705a74a5997a356c0dc2f86a47765e5617c5b65";
    };
    features = builtins.concatLists [
      ["alloc"]
      ["std"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.28" = overridableMkRustCrate (profileName: rec {
    name = "futures-util";
    version = "0.3.28";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "26b01e40b772d54cf6c6d721c1d1abd0647a0106a12ecaa1c186273392a69533";
    };
    features = builtins.concatLists [
      ["alloc"]
      ["async-await"]
      ["async-await-macro"]
      ["channel"]
      ["default"]
      ["futures-channel"]
      ["futures-io"]
      ["futures-macro"]
      ["futures-sink"]
      ["io"]
      ["memchr"]
      ["sink"]
      ["slab"]
      ["std"]
    ];
    dependencies = {
      futures_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.28" {inherit profileName;};
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.28" {inherit profileName;};
      futures_io = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.28" {inherit profileName;};
      futures_macro = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-macro."0.3.28" {profileName = "__noProfile";};
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.28" {inherit profileName;};
      futures_task = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.28" {inherit profileName;};
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" {inherit profileName;};
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.9" {inherit profileName;};
      pin_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" {inherit profileName;};
      slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.6" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.6" = overridableMkRustCrate (profileName: rec {
    name = "generic-array";
    version = "0.14.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "bff49e947297f3312447abdca79f45f4738097cc82b06e72054d2223f601f1b9";
    };
    features = builtins.concatLists [
      ["more_lengths"]
    ];
    dependencies = {
      typenum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.16.0" {inherit profileName;};
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" {profileName = "__noProfile";};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.7" = overridableMkRustCrate (profileName: rec {
    name = "getrandom";
    version = "0.2.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "4eb1a864a501629691edf6c15a593b7a51eebaa1e8468e9ddc623de7c9b58ec6";
    };
    features = builtins.concatLists [
      ["std"]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {inherit profileName;};
      ${
        if hostPlatform.isUnix
        then "libc"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" {inherit profileName;};
      ${
        if hostPlatform.parsed.kernel.name == "wasi"
        then "wasi"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".go-parse-duration."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "go-parse-duration";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "558b88954871f5e5b2af0e62e2e176c8bde7a6c2c4ed41b13d138d96da2e2cbd";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".h2."0.3.13" = overridableMkRustCrate (profileName: rec {
    name = "h2";
    version = "0.3.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "37a82c6d637fc9515a4694bbf1cb2457b79d81ce52b3108bdeea58b07dd34a57";
    };
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.4.0" {inherit profileName;};
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" {inherit profileName;};
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.28" {inherit profileName;};
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.28" {inherit profileName;};
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.28" {inherit profileName;};
      http = rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.8" {inherit profileName;};
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.1" {inherit profileName;};
      slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.6" {inherit profileName;};
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.28.2" {inherit profileName;};
      tokio_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.3" {inherit profileName;};
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.37" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.12.3" = overridableMkRustCrate (profileName: rec {
    name = "hashbrown";
    version = "0.12.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888";
    };
    features = builtins.concatLists [
      ["raw"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".headers."0.3.8" = overridableMkRustCrate (profileName: rec {
    name = "headers";
    version = "0.3.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "f3e372db8e5c0d213e0cd0b9be18be2aca3d44cf2fe30a9d46a65581cd454584";
    };
    dependencies = {
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "base64"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.0" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "bitflags"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "bytes"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.4.0" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "headers_core"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".headers-core."0.2.0" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "http"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.8" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "httpdate"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".httpdate."1.0.2" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "mime"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime."0.3.16" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "sha1"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha1."0.10.5" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".headers-core."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "headers-core";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "e7f66481bfee273957b1f20485a4ff3362987f85b2c236580d81b4eb7a326429";
    };
    dependencies = {
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "http"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.8" {inherit profileName;};
    };
  });

  "unknown".helper."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "helper";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/helper");
    dependencies = {
      actix_web = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-web."4.2.1" {inherit profileName;};
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.71" {inherit profileName;};
      async_stream = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-stream."0.3.5" {inherit profileName;};
      async_trait = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.59" {profileName = "__noProfile";};
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.4.0" {inherit profileName;};
      chrono = rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.23" {inherit profileName;};
      convert_case = rustPackages."registry+https://github.com/rust-lang/crates.io-index".convert_case."0.6.0" {inherit profileName;};
      crossbeam_queue = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-queue."0.3.8" {inherit profileName;};
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.28" {inherit profileName;};
      influxdb2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".influxdb2."0.4.2" {inherit profileName;};
      influxdb2_structmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".influxdb2-structmap."0.2.0" {inherit profileName;};
      lazy_regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy-regex."2.5.0" {inherit profileName;};
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" {inherit profileName;};
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" {inherit profileName;};
      nutype = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nutype."0.2.0" {inherit profileName;};
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.8.4" {inherit profileName;};
      reqwest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".reqwest."0.11.18" {inherit profileName;};
      reqwest_middleware = rustPackages."registry+https://github.com/rust-lang/crates.io-index".reqwest-middleware."0.2.0" {inherit profileName;};
      ron = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ron."0.8.0" {inherit profileName;};
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" {inherit profileName;};
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.82" {inherit profileName;};
      serde_with = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_with."2.3.3" {inherit profileName;};
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.37" {inherit profileName;};
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.28.2" {inherit profileName;};
      uom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".uom."0.34.0" {inherit profileName;};
    };
  });

  "unknown".helper_derive."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "helper_derive";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/helper_derive");
    dependencies = {
      helper = rustPackages."unknown".helper."0.1.0" {inherit profileName;};
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" {inherit profileName;};
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.18" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.1.19" = overridableMkRustCrate (profileName: rec {
    name = "hermit-abi";
    version = "0.1.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33";
    };
    features = builtins.concatLists [
      ["default"]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "hex";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70";
    };
    features = builtins.concatLists [
      ["alloc"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".http."0.2.8" = overridableMkRustCrate (profileName: rec {
    name = "http";
    version = "0.2.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "75f43d41e26995c17e71ee126451dd3941010b0514a81a9d11f3b341debc2399";
    };
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.4.0" {inherit profileName;};
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" {inherit profileName;};
      itoa = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.2" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".http-body."0.4.5" = overridableMkRustCrate (profileName: rec {
    name = "http-body";
    version = "0.4.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "d5f38f16d184e36f2408a55281cd658ecbd3ca05cce6d6510a176eca393e26d1";
    };
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.4.0" {inherit profileName;};
      http = rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.8" {inherit profileName;};
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.9" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".httparse."1.7.1" = overridableMkRustCrate (profileName: rec {
    name = "httparse";
    version = "1.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "496ce29bb5a52785b44e0f7ca2847ae0bb839c9bd28f69acac9b99d461c0c04c";
    };
    features = builtins.concatLists [
      ["default"]
      ["std"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".httpdate."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "httpdate";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "c4a1e36c821dbe04574f602848a19f742f4fb3c98d40449f11bcad18d6b17421";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".hyper."0.14.20" = overridableMkRustCrate (profileName: rec {
    name = "hyper";
    version = "0.14.20";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "02c929dc5c39e335a03c405292728118860721b10190d98c2a0f0efd5baafbac";
    };
    features = builtins.concatLists [
      ["client"]
      ["h2"]
      ["http1"]
      ["http2"]
      ["runtime"]
      ["socket2"]
      ["tcp"]
    ];
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.4.0" {inherit profileName;};
      futures_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.28" {inherit profileName;};
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.28" {inherit profileName;};
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.28" {inherit profileName;};
      h2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".h2."0.3.13" {inherit profileName;};
      http = rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.8" {inherit profileName;};
      http_body = rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."0.4.5" {inherit profileName;};
      httparse = rustPackages."registry+https://github.com/rust-lang/crates.io-index".httparse."1.7.1" {inherit profileName;};
      httpdate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".httpdate."1.0.2" {inherit profileName;};
      itoa = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.2" {inherit profileName;};
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.9" {inherit profileName;};
      socket2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.4.9" {inherit profileName;};
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.28.2" {inherit profileName;};
      tower_service = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.2" {inherit profileName;};
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.37" {inherit profileName;};
      want = rustPackages."registry+https://github.com/rust-lang/crates.io-index".want."0.3.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".hyper-tls."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "hyper-tls";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "d6183ddfa99b85da61a140bea0efc93fdf56ceaa041b37d553518030827f9905";
    };
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.4.0" {inherit profileName;};
      hyper = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."0.14.20" {inherit profileName;};
      native_tls = rustPackages."registry+https://github.com/rust-lang/crates.io-index".native-tls."0.2.11" {inherit profileName;};
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.28.2" {inherit profileName;};
      tokio_native_tls = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-native-tls."0.3.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".iana-time-zone."0.1.53" = overridableMkRustCrate (profileName: rec {
    name = "iana-time-zone";
    version = "0.1.53";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "64c122667b287044802d6ce17ee2ddf13207ed924c712de9a66a5814d5b64765";
    };
    features = builtins.concatLists [
      ["fallback"]
    ];
    dependencies = {
      ${
        if hostPlatform.parsed.kernel.name == "android"
        then "android_system_properties"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".android_system_properties."0.1.5" {inherit profileName;};
      ${
        if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios"
        then "core_foundation_sys"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.3" {inherit profileName;};
      ${
        if hostPlatform.parsed.kernel.name == "haiku"
        then "iana_time_zone_haiku"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".iana-time-zone-haiku."0.1.1" {inherit profileName;};
      ${
        if hostPlatform.parsed.cpu.name == "wasm32"
        then "js_sys"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.58" {inherit profileName;};
      ${
        if hostPlatform.parsed.cpu.name == "wasm32"
        then "wasm_bindgen"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.81" {inherit profileName;};
      ${
        if hostPlatform.parsed.kernel.name == "windows"
        then "winapi"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".iana-time-zone-haiku."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "iana-time-zone-haiku";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "0703ae284fc167426161c2e3f1da3ea71d94b21bedbcc9494e92b28e334e3dca";
    };
    dependencies = {
      cxx = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cxx."1.0.82" {inherit profileName;};
    };
    buildDependencies = {
      cxx_build = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cxx-build."1.0.82" {profileName = "__noProfile";};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".ident_case."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "ident_case";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".idna."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "idna";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "418a0a6fab821475f634efe3ccc45c013f742efe03d853e8d3355d5cb850ecf8";
    };
    dependencies = {
      matches = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matches."0.1.9" {inherit profileName;};
      unicode_bidi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-bidi."0.3.8" {inherit profileName;};
      unicode_normalization = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.21" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.1" = overridableMkRustCrate (profileName: rec {
    name = "indexmap";
    version = "1.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "10a35a97730320ffe8e2d410b5d3b69279b98d2c14bdb8b70ea89ecf7888d41e";
    };
    features = builtins.concatLists [
      ["serde"]
      ["serde-1"]
      ["std"]
    ];
    dependencies = {
      hashbrown = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.12.3" {inherit profileName;};
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" {inherit profileName;};
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" {profileName = "__noProfile";};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".influxdb2."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "influxdb2";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "ef320cb9012fe8e17f5150b09f14b6d0f6e49560c7deeab6d94b6dbbde991093";
    };
    features = builtins.concatLists [
      ["default"]
      ["native-tls"]
    ];
    dependencies = {
      base64 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.0" {inherit profileName;};
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.4.0" {inherit profileName;};
      chrono = rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.23" {inherit profileName;};
      csv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".csv."1.2.2" {inherit profileName;};
      dotenv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dotenv."0.15.0" {inherit profileName;};
      fallible_iterator = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fallible-iterator."0.2.0" {inherit profileName;};
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.28" {inherit profileName;};
      go_parse_duration = rustPackages."registry+https://github.com/rust-lang/crates.io-index".go-parse-duration."0.1.1" {inherit profileName;};
      influxdb2_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".influxdb2-derive."0.1.1" {profileName = "__noProfile";};
      influxdb2_structmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".influxdb2-structmap."0.2.0" {inherit profileName;};
      nom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" {inherit profileName;};
      opentelemetry = rustPackages."registry+https://github.com/rust-lang/crates.io-index".opentelemetry."0.13.0" {inherit profileName;};
      ordered_float = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ordered-float."3.7.0" {inherit profileName;};
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" {inherit profileName;};
      reqwest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".reqwest."0.11.18" {inherit profileName;};
      secrecy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".secrecy."0.8.0" {inherit profileName;};
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" {inherit profileName;};
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.82" {inherit profileName;};
      serde_qs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_qs."0.10.1" {inherit profileName;};
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.9.0" {inherit profileName;};
      snafu = rustPackages."registry+https://github.com/rust-lang/crates.io-index".snafu."0.6.10" {inherit profileName;};
      tempfile = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.3.0" {inherit profileName;};
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.37" {inherit profileName;};
      tracing_subscriber = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.2.25" {inherit profileName;};
      url = rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.2.2" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".influxdb2-derive."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "influxdb2-derive";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "990f899841aa30130fc06f7938e3cc2cbc3d5b92c03fd4b5d79a965045abcf16";
    };
    dependencies = {
      itertools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.5" {inherit profileName;};
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" {inherit profileName;};
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" {inherit profileName;};
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.8.4" {inherit profileName;};
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".influxdb2-structmap."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "influxdb2-structmap";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "1408e712051787357e99ff732e44e8833e79cea0fabc9361018abfbff72b6265";
    };
    dependencies = {
      chrono = rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.23" {inherit profileName;};
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" {inherit profileName;};
      ordered_float = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ordered-float."3.7.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" = overridableMkRustCrate (profileName: rec {
    name = "instant";
    version = "0.1.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c";
    };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".integer-encoding."3.0.4" = overridableMkRustCrate (profileName: rec {
    name = "integer-encoding";
    version = "3.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "8bb03732005da905c88227371639bf1ad885cc712789c011c31c5fb3ab3ccf02";
    };
  });

  "unknown".iot_emulation."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "iot_emulation";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger") "actix-web-opentelemetry")
      (lib.optional (rootFeatures' ? "iot_emulation/default") "default")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger") "jaeger")
      (lib.optional (rootFeatures' ? "iot_emulation/default" || rootFeatures' ? "iot_emulation/mimalloc") "mimalloc")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry") "opentelemetry")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger") "opentelemetry-jaeger")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-middleware") "reqwest-middleware")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing") "reqwest-tracing")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/tracing-actix-web") "tracing-actix-web")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/tracing-opentelemetry") "tracing-opentelemetry")
    ];
    dependencies = {
      actix_web = rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-web."4.2.1" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger"
        then "actix_web_opentelemetry"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-web-opentelemetry."0.13.0" {inherit profileName;};
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.71" {inherit profileName;};
      chrono = rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.23" {inherit profileName;};
      dashmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dashmap."5.4.0" {inherit profileName;};
      helper = rustPackages."unknown".helper."0.1.0" {inherit profileName;};
      helper_derive = buildRustPackages."unknown".helper_derive."0.1.0" {profileName = "__noProfile";};
      influxdb2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".influxdb2."0.4.2" {inherit profileName;};
      influxdb2_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".influxdb2-derive."0.1.1" {profileName = "__noProfile";};
      influxdb2_structmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".influxdb2-structmap."0.2.0" {inherit profileName;};
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" {inherit profileName;};
      mimalloc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mimalloc."0.1.32" {inherit profileName;};
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" {inherit profileName;};
      num_cpus = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.14.0" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry"
        then "opentelemetry"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".opentelemetry."0.18.0" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "opentelemetry_jaeger"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".opentelemetry-jaeger."0.17.0" {inherit profileName;};
      prometheus = rustPackages."registry+https://github.com/rust-lang/crates.io-index".prometheus."0.13.3" {inherit profileName;};
      reqwest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".reqwest."0.11.18" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-middleware"
        then "reqwest_middleware"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".reqwest-middleware."0.2.0" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing"
        then "reqwest_tracing"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".reqwest-tracing."0.4.0" {inherit profileName;};
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" {inherit profileName;};
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.82" {inherit profileName;};
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.28.2" {inherit profileName;};
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.37" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/tracing-actix-web"
        then "tracing_actix_web"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-actix-web."0.7.2" {inherit profileName;};
      tracing_forest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-forest."0.1.5" {inherit profileName;};
      tracing_log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-log."0.1.3" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "tracing_opentelemetry"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-opentelemetry."0.18.0" {inherit profileName;};
      tracing_subscriber = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.3.16" {inherit profileName;};
      uuid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."1.1.2" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".ipnet."2.5.0" = overridableMkRustCrate (profileName: rec {
    name = "ipnet";
    version = "2.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "879d54834c8c76457ef4293a689b2a8c59b076067ad77b15efafbb05f92a592b";
    };
    features = builtins.concatLists [
      ["default"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.5" = overridableMkRustCrate (profileName: rec {
    name = "itertools";
    version = "0.10.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473";
    };
    features = builtins.concatLists [
      ["default"]
      ["use_alloc"]
      ["use_std"]
    ];
    dependencies = {
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.8.1" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "itoa";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "112c678d4050afce233f4f2852bb2eb519230b3cf12f33585275537d7e41578d";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".jobserver."0.1.25" = overridableMkRustCrate (profileName: rec {
    name = "jobserver";
    version = "0.1.25";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "068b1ee6743e4d11fb9c6a1e6064b3693a1b600e7f5f5988047d98b3dc9fb90b";
    };
    dependencies = {
      ${
        if hostPlatform.isUnix
        then "libc"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.58" = overridableMkRustCrate (profileName: rec {
    name = "js-sys";
    version = "0.3.58";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "c3fac17f7123a73ca62df411b1bf727ccc805daa070338fda671c86dac1bdc27";
    };
    dependencies = {
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.81" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".language-tags."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "language-tags";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "d4345964bb142484797b161f473a503a434de77149dd8c7427788c6e13379388";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".lazy-regex."2.5.0" = overridableMkRustCrate (profileName: rec {
    name = "lazy-regex";
    version = "2.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "ff63c423c68ea6814b7da9e88ce585f793c87ddd9e78f646970891769c8235d4";
    };
    features = builtins.concatLists [
      ["default"]
    ];
    dependencies = {
      lazy_regex_proc_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy-regex-proc_macros."2.4.1" {profileName = "__noProfile";};
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" {inherit profileName;};
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.8.4" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".lazy-regex-proc_macros."2.4.1" = overridableMkRustCrate (profileName: rec {
    name = "lazy-regex-proc_macros";
    version = "2.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "8edfc11b8f56ce85e207e62ea21557cfa09bb24a8f6b04ae181b086ff8611c22";
    };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" {inherit profileName;};
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" {inherit profileName;};
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.8.4" {inherit profileName;};
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" = overridableMkRustCrate (profileName: rec {
    name = "lazy_static";
    version = "1.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" = overridableMkRustCrate (profileName: rec {
    name = "libc";
    version = "0.2.147";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "b4668fb0ea861c1df094127ac5f1da3409a82116a4ba74fca2e58ef927159bb3";
    };
    features = builtins.concatLists [
      ["default"]
      ["std"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".libmimalloc-sys."0.1.28" = overridableMkRustCrate (profileName: rec {
    name = "libmimalloc-sys";
    version = "0.1.28";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "04d1c67deb83e6b75fa4fe3309e09cfeade12e7721d95322af500d3814ea60c9";
    };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" {inherit profileName;};
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" {profileName = "__noProfile";};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".link-cplusplus."1.0.7" = overridableMkRustCrate (profileName: rec {
    name = "link-cplusplus";
    version = "1.0.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "9272ab7b96c9046fbc5bc56c06c117cb639fe2d509df0c421cad82d2915cf369";
    };
    features = builtins.concatLists [
      ["default"]
    ];
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" {profileName = "__noProfile";};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".local-channel."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "local-channel";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "7f303ec0e94c6c54447f84f3b0ef7af769858a9c4ef56ef2a986d3dcd4c3fc9c";
    };
    dependencies = {
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.28" {inherit profileName;};
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.28" {inherit profileName;};
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.28" {inherit profileName;};
      local_waker = rustPackages."registry+https://github.com/rust-lang/crates.io-index".local-waker."0.1.3" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".local-waker."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "local-waker";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "e34f76eb3611940e0e7d53a9aaa4e6a3151f69541a282fd0dad5571420c53ff1";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.9" = overridableMkRustCrate (profileName: rec {
    name = "lock_api";
    version = "0.4.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "435011366fe56583b16cf956f9df0095b405b82d76425bc8981c0e22e60ec4df";
    };
    dependencies = {
      scopeguard = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.1.0" {inherit profileName;};
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" {profileName = "__noProfile";};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" = overridableMkRustCrate (profileName: rec {
    name = "log";
    version = "0.4.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "abb12e687cfb44aa40f41fc3978ef76448f9b6038cad6aef4259d3c095a2382e";
    };
    features = builtins.concatLists [
      ["std"]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".matchers."0.0.1" = overridableMkRustCrate (profileName: rec {
    name = "matchers";
    version = "0.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "f099785f7595cc4b4553a174ce30dd7589ef93391ff414dbb67f62392b9e0ce1";
    };
    dependencies = {
      regex_automata = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.1.10" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".matchers."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "matchers";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "8263075bb86c5a1b1427b5ae862e8889656f126e9f77c484496e8b47cf5c5558";
    };
    dependencies = {
      regex_automata = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.1.10" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".matches."0.1.9" = overridableMkRustCrate (profileName: rec {
    name = "matches";
    version = "0.1.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "a3e378b66a060d48947b590737b30a1be76706c8dd7b8ba0f2fe3989c68a853f";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" = overridableMkRustCrate (profileName: rec {
    name = "memchr";
    version = "2.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "2dffe52ecf27772e601905b7522cb4ef790d2cc203488bbd0e2fe85fcb74566d";
    };
    features = builtins.concatLists [
      ["default"]
      ["std"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".mimalloc."0.1.32" = overridableMkRustCrate (profileName: rec {
    name = "mimalloc";
    version = "0.1.32";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "9b2374e2999959a7b583e1811a1ddbf1d3a4b9496eceb9746f1192a59d871eca";
    };
    dependencies = {
      libmimalloc_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libmimalloc-sys."0.1.28" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".mime."0.3.16" = overridableMkRustCrate (profileName: rec {
    name = "mime";
    version = "0.3.16";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "2a60c7ce501c71e03a9c9c0d35b861413ae925bd979cc7a4e30d060069aaac8d";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".mime_guess."2.0.4" = overridableMkRustCrate (profileName: rec {
    name = "mime_guess";
    version = "2.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "4192263c238a5f0d0c6bfd21f336a313a4ce1c450542449ca191bb657b4642ef";
    };
    dependencies = {
      mime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime."0.3.16" {inherit profileName;};
      unicase = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicase."2.6.0" {inherit profileName;};
    };
    buildDependencies = {
      unicase = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".unicase."2.6.0" {profileName = "__noProfile";};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".minimal-lexical."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "minimal-lexical";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a";
    };
    features = builtins.concatLists [
      ["std"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.6.2" = overridableMkRustCrate (profileName: rec {
    name = "miniz_oxide";
    version = "0.6.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "b275950c28b37e794e8c55d88aeb5e139d0ce23fdbbeda68f8d7174abdf9e8fa";
    };
    features = builtins.concatLists [
      ["with-alloc"]
    ];
    dependencies = {
      adler = rustPackages."registry+https://github.com/rust-lang/crates.io-index".adler."1.0.2" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".mio."0.8.4" = overridableMkRustCrate (profileName: rec {
    name = "mio";
    version = "0.8.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "57ee1c23c7c63b0c9250c339ffdc69255f110b298b901b9f6c82547b7b87caaf";
    };
    features = builtins.concatLists [
      ["default"]
      ["net"]
      ["os-ext"]
      ["os-poll"]
    ];
    dependencies = {
      ${
        if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "wasi"
        then "libc"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" {inherit profileName;};
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" {inherit profileName;};
      ${
        if hostPlatform.parsed.kernel.name == "wasi"
        then "wasi"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1" {inherit profileName;};
      ${
        if hostPlatform.isWindows
        then "windows_sys"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.36.1" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".native-tls."0.2.11" = overridableMkRustCrate (profileName: rec {
    name = "native-tls";
    version = "0.2.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "07226173c32f2926027b63cce4bcd8076c3552846cbe7925f3aaffeac0a3b92e";
    };
    dependencies = {
      ${
        if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios"
        then "lazy_static"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" {inherit profileName;};
      ${
        if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios"
        then "libc"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" {inherit profileName;};
      ${
        if !(hostPlatform.parsed.kernel.name == "windows" || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios")
        then "log"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" {inherit profileName;};
      ${
        if !(hostPlatform.parsed.kernel.name == "windows" || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios")
        then "openssl"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl."0.10.43" {inherit profileName;};
      ${
        if !(hostPlatform.parsed.kernel.name == "windows" || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios")
        then "openssl_probe"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-probe."0.1.5" {inherit profileName;};
      ${
        if !(hostPlatform.parsed.kernel.name == "windows" || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios")
        then "openssl_sys"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-sys."0.9.78" {inherit profileName;};
      ${
        if hostPlatform.parsed.kernel.name == "windows"
        then "schannel"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".schannel."0.1.20" {inherit profileName;};
      ${
        if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios"
        then "security_framework"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".security-framework."2.7.0" {inherit profileName;};
      ${
        if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios"
        then "security_framework_sys"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".security-framework-sys."2.6.1" {inherit profileName;};
      ${
        if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios"
        then "tempfile"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.3.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" = overridableMkRustCrate (profileName: rec {
    name = "nom";
    version = "7.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a";
    };
    features = builtins.concatLists [
      ["alloc"]
      ["default"]
      ["std"]
    ];
    dependencies = {
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" {inherit profileName;};
      minimal_lexical = rustPackages."registry+https://github.com/rust-lang/crates.io-index".minimal-lexical."0.2.1" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".nu-ansi-term."0.46.0" = overridableMkRustCrate (profileName: rec {
    name = "nu-ansi-term";
    version = "0.46.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84";
    };
    dependencies = {
      overload = rustPackages."registry+https://github.com/rust-lang/crates.io-index".overload."0.1.1" {inherit profileName;};
      ${
        if hostPlatform.parsed.kernel.name == "windows"
        then "winapi"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.45" = overridableMkRustCrate (profileName: rec {
    name = "num-integer";
    version = "0.1.45";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "225d3389fb3509a24c93f5c29eb6bde2586b98d9f016636dff58d7c6f7569cd9";
    };
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" {inherit profileName;};
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" {profileName = "__noProfile";};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" = overridableMkRustCrate (profileName: rec {
    name = "num-traits";
    version = "0.2.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "578ede34cf02f8924ab9447f50c28075b4d3e5b269972345e7e0372b38c6cdcd";
    };
    features = builtins.concatLists [
      ["default"]
      ["std"]
    ];
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" {profileName = "__noProfile";};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.14.0" = overridableMkRustCrate (profileName: rec {
    name = "num_cpus";
    version = "1.14.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "f6058e64324c71e02bc2b150e4f3bc8286db6c83092132ffa3f6b1eab0f9def5";
    };
    dependencies = {
      ${
        if (hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "aarch64") && hostPlatform.parsed.kernel.name == "hermit"
        then "hermit_abi"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.1.19" {inherit profileName;};
      ${
        if !hostPlatform.isWindows
        then "libc"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".nutype."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "nutype";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "060a7fdadbae85c7063375e8fb9dd88c9ac336a22d1f0eb2fefd53dbf98edcb5";
    };
    features = builtins.concatLists [
      ["regex"]
      ["serde"]
    ];
    dependencies = {
      nutype_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".nutype_macros."0.2.0" {profileName = "__noProfile";};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".nutype_macros."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "nutype_macros";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "6a0d2e869a6039d8b1d10f8a478f76538958808fbf95dae367875ee9635430b9";
    };
    features = builtins.concatLists [
      ["regex"]
      ["serde"]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" {inherit profileName;};
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" {inherit profileName;};
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.8.4" {inherit profileName;};
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" = overridableMkRustCrate (profileName: rec {
    name = "once_cell";
    version = "1.18.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "dd8b5dd2ae5ed71462c540258bedcb51965123ad7e7ccf4b9a8cafaa4a63576d";
    };
    features = builtins.concatLists [
      ["alloc"]
      ["default"]
      ["race"]
      ["std"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".openssl."0.10.43" = overridableMkRustCrate (profileName: rec {
    name = "openssl";
    version = "0.10.43";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "020433887e44c27ff16365eaa2d380547a94544ad509aff6eb5b6e3e0b27b376";
    };
    features = builtins.concatLists [
      ["default"]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" {inherit profileName;};
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {inherit profileName;};
      foreign_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" {inherit profileName;};
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" {inherit profileName;};
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" {inherit profileName;};
      openssl_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-macros."0.1.0" {profileName = "__noProfile";};
      ffi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-sys."0.9.78" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".openssl-macros."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "openssl-macros";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "b501e44f11665960c7e7fcf062c7d96a14ade4aa98116c004b2e37b5be7d736c";
    };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" {inherit profileName;};
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" {inherit profileName;};
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".openssl-probe."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "openssl-probe";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "ff011a302c396a5197692431fc1948019154afc178baf7d8e37367442a4601cf";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".openssl-sys."0.9.78" = overridableMkRustCrate (profileName: rec {
    name = "openssl-sys";
    version = "0.9.78";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "07d5c8cb6e57b3a3612064d7b18b117912b4ce70955c2504d4b741c9e244b132";
    };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" {inherit profileName;};
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" {profileName = "__noProfile";};
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" {profileName = "__noProfile";};
      pkg_config = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.26" {profileName = "__noProfile";};
      ${
        if hostPlatform.parsed.abi.name == "msvc"
        then "vcpkg"
        else null
      } =
        buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".vcpkg."0.2.15" {profileName = "__noProfile";};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".opentelemetry."0.13.0" = overridableMkRustCrate (profileName: rec {
    name = "opentelemetry";
    version = "0.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "b91cea1dfd50064e52db033179952d18c770cbc5dfefc8eba45d619357ba3914";
    };
    features = builtins.concatLists [
      ["async-trait"]
      ["dashmap"]
      ["fnv"]
      ["metrics"]
      ["percent-encoding"]
      ["pin-project"]
      ["rand"]
      ["rt-tokio"]
      ["tokio"]
      ["tokio-stream"]
      ["trace"]
    ];
    dependencies = {
      async_trait = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.59" {profileName = "__noProfile";};
      dashmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dashmap."4.0.2" {inherit profileName;};
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" {inherit profileName;};
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.28" {inherit profileName;};
      ${
        if hostPlatform.parsed.cpu.name == "wasm32"
        then "js_sys"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.58" {inherit profileName;};
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" {inherit profileName;};
      percent_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" {inherit profileName;};
      pin_project = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.0.12" {inherit profileName;};
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" {inherit profileName;};
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.37" {inherit profileName;};
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.28.2" {inherit profileName;};
      tokio_stream = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-stream."0.1.11" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".opentelemetry."0.18.0" = overridableMkRustCrate (profileName: rec {
    name = "opentelemetry";
    version = "0.18.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "69d6c3d7288a106c0a363e4b0e8d308058d56902adefb16f4936f417ffef086e";
    };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web") "default")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry") "metrics")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger") "rt-tokio")
      (lib.optional (rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger") "rt-tokio-current-thread")
      (lib.optional (rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry") "trace")
    ];
    dependencies = {
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "opentelemetry_api"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".opentelemetry_api."0.18.0" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "opentelemetry_sdk"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".opentelemetry_sdk."0.18.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".opentelemetry-http."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "opentelemetry-http";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "1edc79add46364183ece1a4542592ca593e6421c60807232f5b8f7a31703825d";
    };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger") "reqwest")
    ];
    dependencies = {
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "async_trait"
        else null
      } =
        buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.59" {profileName = "__noProfile";};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "bytes"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.4.0" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "http"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.8" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "opentelemetry_api"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".opentelemetry_api."0.18.0" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "reqwest"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".reqwest."0.11.18" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".opentelemetry-jaeger."0.17.0" = overridableMkRustCrate (profileName: rec {
    name = "opentelemetry-jaeger";
    version = "0.17.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "1e785d273968748578931e4dc3b4f5ec86b26e09d9e0d66b55adda7fce742f7a";
    };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger") "collector_client")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger") "headers")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger") "http")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger") "opentelemetry-http")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger") "reqwest")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger") "reqwest_collector_client")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger") "rt-tokio")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger") "tokio")
    ];
    dependencies = {
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "async_trait"
        else null
      } =
        buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.59" {profileName = "__noProfile";};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "futures"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.28" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "futures_executor"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-executor."0.3.28" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "headers"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".headers."0.3.8" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "http"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.8" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "once_cell"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "opentelemetry"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".opentelemetry."0.18.0" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "opentelemetry_http"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".opentelemetry-http."0.7.0" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "opentelemetry_semantic_conventions"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".opentelemetry-semantic-conventions."0.10.0" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "reqwest"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".reqwest."0.11.18" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "thiserror"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.37" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "thrift"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".thrift."0.16.0" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "tokio"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.28.2" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".opentelemetry-semantic-conventions."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "opentelemetry-semantic-conventions";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "9b02e0230abb0ab6636d18e2ba8fa02903ea63772281340ccac18e0af3ec9eeb";
    };
    dependencies = {
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "opentelemetry"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".opentelemetry."0.18.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".opentelemetry_api."0.18.0" = overridableMkRustCrate (profileName: rec {
    name = "opentelemetry_api";
    version = "0.18.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "c24f96e21e7acc813c7a8394ee94978929db2bcc46cf6b5014fc612bf7760c22";
    };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry") "default")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry") "fnv")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry") "metrics")
      (lib.optional (rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry") "pin-project-lite")
      (lib.optional (rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry") "trace")
    ];
    dependencies = {
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "fnv"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "futures_channel"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.28" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "futures_util"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.28" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "indexmap"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.1" {inherit profileName;};
      ${
        if (rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry") && hostPlatform.parsed.cpu.name == "wasm32"
        then "js_sys"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.58" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "once_cell"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "pin_project_lite"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.9" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "thiserror"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.37" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".opentelemetry_sdk."0.18.0" = overridableMkRustCrate (profileName: rec {
    name = "opentelemetry_sdk";
    version = "0.18.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "1ca41c4933371b61c2a2f214bf16931499af4ec90543604ec828f7a625c09113";
    };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry") "async-trait")
      (lib.optional (rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry") "crossbeam-channel")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry") "dashmap")
      (lib.optional (rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry") "default")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry") "fnv")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry") "metrics")
      (lib.optional (rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry") "percent-encoding")
      (lib.optional (rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry") "rand")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger") "rt-tokio")
      (lib.optional (rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger") "rt-tokio-current-thread")
      (lib.optional (rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger") "tokio")
      (lib.optional (rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger") "tokio-stream")
      (lib.optional (rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry") "trace")
    ];
    dependencies = {
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "async_trait"
        else null
      } =
        buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.59" {profileName = "__noProfile";};
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "crossbeam_channel"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.6" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "dashmap"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".dashmap."5.4.0" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "fnv"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "futures_channel"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.28" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "futures_executor"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-executor."0.3.28" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "futures_util"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.28" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "once_cell"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "opentelemetry_api"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".opentelemetry_api."0.18.0" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "percent_encoding"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "rand"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "thiserror"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.37" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "tokio"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.28.2" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/actix-web-opentelemetry" || rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "tokio_stream"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-stream."0.1.11" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".ordered-float."1.1.1" = overridableMkRustCrate (profileName: rec {
    name = "ordered-float";
    version = "1.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "3305af35278dd29f46fcdd139e0b1fbfae2153f0e5928b39b035542dd31e37b7";
    };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger") "default")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger") "std")
    ];
    dependencies = {
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "num_traits"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".ordered-float."3.7.0" = overridableMkRustCrate (profileName: rec {
    name = "ordered-float";
    version = "3.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "2fc2dbde8f8a79f2102cc474ceb0ad68e3b80b85289ea62389b60e66777e4213";
    };
    features = builtins.concatLists [
      ["default"]
      ["std"]
    ];
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".overload."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "overload";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "7d17b78036a60663b797adeaee46f5c9dfebb86948d1255007a1d6be0271ff99";
    };
    features = builtins.concatLists [
      ["default"]
    ];
    dependencies = {
      instant = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" {inherit profileName;};
      lock_api = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.9" {inherit profileName;};
      parking_lot_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.8.6" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot";
    version = "0.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "3742b2c103b9f06bc9fff0a37ff4912935851bee6d36f3c02bcc755bcfec228f";
    };
    features = builtins.concatLists [
      ["default"]
    ];
    dependencies = {
      lock_api = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.9" {inherit profileName;};
      parking_lot_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.9.3" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.8.6" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot_core";
    version = "0.8.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "60a2cfe6f0ad2bfc16aefa463b497d5c7a5ecd44a23efa72aa342d90177356dc";
    };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {inherit profileName;};
      instant = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" {inherit profileName;};
      ${
        if hostPlatform.isUnix
        then "libc"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" {inherit profileName;};
      ${
        if hostPlatform.parsed.kernel.name == "redox"
        then "syscall"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.13" {inherit profileName;};
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.9.0" {inherit profileName;};
      ${
        if hostPlatform.isWindows
        then "winapi"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.9.3" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot_core";
    version = "0.9.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "09a279cbf25cb0757810394fbc1e359949b59e348145c643a939a525692e6929";
    };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {inherit profileName;};
      ${
        if hostPlatform.isUnix
        then "libc"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" {inherit profileName;};
      ${
        if hostPlatform.parsed.kernel.name == "redox"
        then "syscall"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.13" {inherit profileName;};
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.9.0" {inherit profileName;};
      ${
        if hostPlatform.isWindows
        then "windows_sys"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.36.1" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".paste."1.0.9" = overridableMkRustCrate (profileName: rec {
    name = "paste";
    version = "1.0.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "b1de2e551fb905ac83f73f7aedf2f0cb4a0da7e35efa24a202a936269f1f18e1";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" = overridableMkRustCrate (profileName: rec {
    name = "percent-encoding";
    version = "2.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".pin-project."1.0.12" = overridableMkRustCrate (profileName: rec {
    name = "pin-project";
    version = "1.0.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "ad29a609b6bcd67fee905812e544992d216af9d755757c05ed2d0e15a74c6ecc";
    };
    dependencies = {
      pin_project_internal = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-internal."1.0.12" {profileName = "__noProfile";};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".pin-project-internal."1.0.12" = overridableMkRustCrate (profileName: rec {
    name = "pin-project-internal";
    version = "1.0.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "069bdb1e05adc7a8990dce9cc75370895fbe4e3d58b9b73bf1aee56359344a55";
    };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" {inherit profileName;};
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" {inherit profileName;};
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.9" = overridableMkRustCrate (profileName: rec {
    name = "pin-project-lite";
    version = "0.2.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "e0a7ae3ac2f1173085d398531c705756c94a4c56843785df85a60c1a0afac116";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "pin-utils";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.26" = overridableMkRustCrate (profileName: rec {
    name = "pkg-config";
    version = "0.3.26";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "6ac9a59f73473f1b8d852421e59e64809f025994837ef743615c6d0c5b305160";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.16" = overridableMkRustCrate (profileName: rec {
    name = "ppv-lite86";
    version = "0.2.16";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "eb9f9e6e233e5c4a35559a617bf40a4ec447db2e84c20b55a6f83167b7e57872";
    };
    features = builtins.concatLists [
      ["simd"]
      ["std"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro2";
    version = "1.0.60";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "dec2b086b7a862cf4de201096214fa870344cf922b2b30c167badb3af3195406";
    };
    features = builtins.concatLists [
      ["default"]
      ["proc-macro"]
      ["span-locations"]
    ];
    dependencies = {
      unicode_ident = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.2" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".prometheus."0.13.3" = overridableMkRustCrate (profileName: rec {
    name = "prometheus";
    version = "0.13.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "449811d15fbdf5ceb5c1144416066429cf82316e2ec8ce0c1f6f8a02e7bbcf8c";
    };
    features = builtins.concatLists [
      ["default"]
      ["protobuf"]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {inherit profileName;};
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" {inherit profileName;};
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" {inherit profileName;};
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" {inherit profileName;};
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" {inherit profileName;};
      protobuf = rustPackages."registry+https://github.com/rust-lang/crates.io-index".protobuf."2.28.0" {inherit profileName;};
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.37" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".protobuf."2.28.0" = overridableMkRustCrate (profileName: rec {
    name = "protobuf";
    version = "2.28.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "106dd99e98437432fed6519dedecfade6a06a73bb7b2a1e019fdd2bee5778d94";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" = overridableMkRustCrate (profileName: rec {
    name = "quote";
    version = "1.0.28";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "1b9ab9c7eadfd8df19006f1cf1a4aed13540ed5cbc047010ece5826e10825488";
    };
    features = builtins.concatLists [
      ["default"]
      ["proc-macro"]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" = overridableMkRustCrate (profileName: rec {
    name = "rand";
    version = "0.8.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404";
    };
    features = builtins.concatLists [
      ["alloc"]
      ["default"]
      ["getrandom"]
      ["libc"]
      ["rand_chacha"]
      ["std"]
      ["std_rng"]
    ];
    dependencies = {
      ${
        if hostPlatform.isUnix
        then "libc"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" {inherit profileName;};
      rand_chacha = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.1" {inherit profileName;};
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.3" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "rand_chacha";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88";
    };
    features = builtins.concatLists [
      ["std"]
    ];
    dependencies = {
      ppv_lite86 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.16" {inherit profileName;};
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.3" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.3" = overridableMkRustCrate (profileName: rec {
    name = "rand_core";
    version = "0.6.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "d34f1408f55294453790c48b2f1ebbb1c5b4b7563eb1f418bcfcfdbb06ebb4e7";
    };
    features = builtins.concatLists [
      ["alloc"]
      ["getrandom"]
      ["std"]
    ];
    dependencies = {
      getrandom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.7" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.13" = overridableMkRustCrate (profileName: rec {
    name = "redox_syscall";
    version = "0.2.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "62f25bc4c7e55e0b0b7a1d43fb893f4fa1361d0abe38b9ce4f323c2adfe6ef42";
    };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".regex."1.8.4" = overridableMkRustCrate (profileName: rec {
    name = "regex";
    version = "1.8.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "d0ab3ca65655bb1e41f2a8c8cd662eb4fb035e67c3f78da1d61dffe89d07300f";
    };
    features = builtins.concatLists [
      ["aho-corasick"]
      ["default"]
      ["memchr"]
      ["perf"]
      ["perf-cache"]
      ["perf-dfa"]
      ["perf-inline"]
      ["perf-literal"]
      ["std"]
      ["unicode"]
      ["unicode-age"]
      ["unicode-bool"]
      ["unicode-case"]
      ["unicode-gencat"]
      ["unicode-perl"]
      ["unicode-script"]
      ["unicode-segment"]
    ];
    dependencies = {
      aho_corasick = rustPackages."registry+https://github.com/rust-lang/crates.io-index".aho-corasick."1.0.2" {inherit profileName;};
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.5.0" {inherit profileName;};
      regex_syntax = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.7.2" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.1.10" = overridableMkRustCrate (profileName: rec {
    name = "regex-automata";
    version = "0.1.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132";
    };
    features = builtins.concatLists [
      ["default"]
      ["regex-syntax"]
      ["std"]
    ];
    dependencies = {
      regex_syntax = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.6.27" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.6.27" = overridableMkRustCrate (profileName: rec {
    name = "regex-syntax";
    version = "0.6.27";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "a3f87b73ce11b1619a3c6332f45341e0047173771e8b8b73f87bfeefb7b56244";
    };
    features = builtins.concatLists [
      ["default"]
      ["unicode"]
      ["unicode-age"]
      ["unicode-bool"]
      ["unicode-case"]
      ["unicode-gencat"]
      ["unicode-perl"]
      ["unicode-script"]
      ["unicode-segment"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.7.2" = overridableMkRustCrate (profileName: rec {
    name = "regex-syntax";
    version = "0.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "436b050e76ed2903236f032a59761c1eb99e1b0aead2c257922771dab1fc8c78";
    };
    features = builtins.concatLists [
      ["default"]
      ["std"]
      ["unicode"]
      ["unicode-age"]
      ["unicode-bool"]
      ["unicode-case"]
      ["unicode-gencat"]
      ["unicode-perl"]
      ["unicode-script"]
      ["unicode-segment"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".remove_dir_all."0.5.3" = overridableMkRustCrate (profileName: rec {
    name = "remove_dir_all";
    version = "0.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "3acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7";
    };
    dependencies = {
      ${
        if hostPlatform.isWindows
        then "winapi"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".reqwest."0.11.18" = overridableMkRustCrate (profileName: rec {
    name = "reqwest";
    version = "0.11.18";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "cde824a14b7c14f85caff81225f411faacc04a2013f41670f41443742b1c1c55";
    };
    features = builtins.concatLists [
      ["__tls"]
      ["async-compression"]
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger") "blocking")
      ["default"]
      ["default-tls"]
      ["gzip"]
      ["hyper-tls"]
      ["json"]
      ["mime_guess"]
      ["multipart"]
      ["native-tls"]
      ["native-tls-crate"]
      ["serde_json"]
      ["stream"]
      ["tokio-native-tls"]
      ["tokio-util"]
      ["wasm-streams"]
    ];
    dependencies = {
      ${
        if !(hostPlatform.parsed.cpu.name == "wasm32")
        then "async_compression"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-compression."0.4.0" {inherit profileName;};
      base64 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.21.2" {inherit profileName;};
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.4.0" {inherit profileName;};
      ${
        if !(hostPlatform.parsed.cpu.name == "wasm32")
        then "encoding_rs"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".encoding_rs."0.8.31" {inherit profileName;};
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.28" {inherit profileName;};
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.28" {inherit profileName;};
      ${
        if !(hostPlatform.parsed.cpu.name == "wasm32")
        then "h2"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".h2."0.3.13" {inherit profileName;};
      http = rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.8" {inherit profileName;};
      ${
        if !(hostPlatform.parsed.cpu.name == "wasm32")
        then "http_body"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."0.4.5" {inherit profileName;};
      ${
        if !(hostPlatform.parsed.cpu.name == "wasm32")
        then "hyper"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."0.14.20" {inherit profileName;};
      ${
        if !(hostPlatform.parsed.cpu.name == "wasm32")
        then "hyper_tls"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper-tls."0.5.0" {inherit profileName;};
      ${
        if !(hostPlatform.parsed.cpu.name == "wasm32")
        then "ipnet"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".ipnet."2.5.0" {inherit profileName;};
      ${
        if hostPlatform.parsed.cpu.name == "wasm32"
        then "js_sys"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.58" {inherit profileName;};
      ${
        if !(hostPlatform.parsed.cpu.name == "wasm32")
        then "log"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" {inherit profileName;};
      ${
        if !(hostPlatform.parsed.cpu.name == "wasm32")
        then "mime"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime."0.3.16" {inherit profileName;};
      mime_guess = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime_guess."2.0.4" {inherit profileName;};
      ${
        if !(hostPlatform.parsed.cpu.name == "wasm32")
        then "native_tls_crate"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".native-tls."0.2.11" {inherit profileName;};
      ${
        if !(hostPlatform.parsed.cpu.name == "wasm32")
        then "once_cell"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" {inherit profileName;};
      ${
        if !(hostPlatform.parsed.cpu.name == "wasm32")
        then "percent_encoding"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" {inherit profileName;};
      ${
        if !(hostPlatform.parsed.cpu.name == "wasm32")
        then "pin_project_lite"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.9" {inherit profileName;};
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" {inherit profileName;};
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.82" {inherit profileName;};
      serde_urlencoded = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_urlencoded."0.7.1" {inherit profileName;};
      ${
        if !(hostPlatform.parsed.cpu.name == "wasm32")
        then "tokio"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.28.2" {inherit profileName;};
      ${
        if !(hostPlatform.parsed.cpu.name == "wasm32")
        then "tokio_native_tls"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-native-tls."0.3.0" {inherit profileName;};
      ${
        if !(hostPlatform.parsed.cpu.name == "wasm32")
        then "tokio_util"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.3" {inherit profileName;};
      tower_service = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.2" {inherit profileName;};
      url = rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.2.2" {inherit profileName;};
      ${
        if hostPlatform.parsed.cpu.name == "wasm32"
        then "wasm_bindgen"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.81" {inherit profileName;};
      ${
        if hostPlatform.parsed.cpu.name == "wasm32"
        then "wasm_bindgen_futures"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.31" {inherit profileName;};
      ${
        if hostPlatform.parsed.cpu.name == "wasm32"
        then "wasm_streams"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-streams."0.2.3" {inherit profileName;};
      ${
        if hostPlatform.parsed.cpu.name == "wasm32"
        then "web_sys"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.58" {inherit profileName;};
      ${
        if hostPlatform.isWindows
        then "winreg"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".winreg."0.10.1" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".reqwest-middleware."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "reqwest-middleware";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "4a1c03e9011a8c59716ad13115550469e081e2e9892656b0ba6a47c907921894";
    };
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.71" {inherit profileName;};
      async_trait = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.59" {profileName = "__noProfile";};
      http = rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.8" {inherit profileName;};
      reqwest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".reqwest."0.11.18" {inherit profileName;};
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" {inherit profileName;};
      task_local_extensions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".task-local-extensions."0.1.3" {inherit profileName;};
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.37" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".reqwest-tracing."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "reqwest-tracing";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "b739d87a6b2cf4743968ad2b4cef648fbe0204c19999509824425babb2097bce";
    };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing") "opentelemetry_0_18")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing") "opentelemetry_0_18_pkg")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing") "tracing-opentelemetry_0_18_pkg")
    ];
    dependencies = {
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing"
        then "async_trait"
        else null
      } =
        buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.59" {profileName = "__noProfile";};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing"
        then "opentelemetry_0_18_pkg"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".opentelemetry."0.18.0" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing"
        then "reqwest"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".reqwest."0.11.18" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing"
        then "reqwest_middleware"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".reqwest-middleware."0.2.0" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing"
        then "task_local_extensions"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".task-local-extensions."0.1.3" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing"
        then "tracing"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.37" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing"
        then "tracing_opentelemetry_0_18_pkg"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-opentelemetry."0.18.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".ron."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "ron";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "300a51053b1cb55c80b7a9fde4120726ddf25ca241a1cbb926626f62fb136bff";
    };
    features = builtins.concatLists [
      ["default"]
    ];
    dependencies = {
      base64 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.0" {inherit profileName;};
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" {inherit profileName;};
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_version";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366";
    };
    dependencies = {
      semver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver."1.0.14" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.10" = overridableMkRustCrate (profileName: rec {
    name = "ryu";
    version = "1.0.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "f3f6f92acf49d1b98f7a81226834412ada05458b7364277387724a237f062695";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".schannel."0.1.20" = overridableMkRustCrate (profileName: rec {
    name = "schannel";
    version = "0.1.20";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "88d6731146462ea25d9244b2ed5fd1d716d25c52e4d54aa4fb0f3c4e9854dbe2";
    };
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" {inherit profileName;};
      windows_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.36.1" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "scopeguard";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".scratch."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "scratch";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "9c8132065adcfd6e02db789d9285a0deb2f3fcb04002865ab67d5fb103533898";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".secrecy."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "secrecy";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "9bd1c54ea06cfd2f6b63219704de0b9b4f72dcc2b8fdef820be6cd799780e91e";
    };
    features = builtins.concatLists [
      ["alloc"]
      ["default"]
    ];
    dependencies = {
      zeroize = rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".security-framework."2.7.0" = overridableMkRustCrate (profileName: rec {
    name = "security-framework";
    version = "2.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "2bc1bb97804af6631813c55739f771071e0f2ed33ee20b68c86ec505d906356c";
    };
    features = builtins.concatLists [
      ["OSX_10_9"]
      ["default"]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" {inherit profileName;};
      core_foundation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.3" {inherit profileName;};
      core_foundation_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.3" {inherit profileName;};
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" {inherit profileName;};
      security_framework_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".security-framework-sys."2.6.1" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".security-framework-sys."2.6.1" = overridableMkRustCrate (profileName: rec {
    name = "security-framework-sys";
    version = "2.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "0160a13a177a45bfb43ce71c01580998474f556ad854dcbca936dd2841a5c556";
    };
    features = builtins.concatLists [
      ["OSX_10_9"]
      ["default"]
    ];
    dependencies = {
      core_foundation_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.3" {inherit profileName;};
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".semver."1.0.14" = overridableMkRustCrate (profileName: rec {
    name = "semver";
    version = "1.0.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "e25dfac463d778e353db5be2449d1cce89bd6fd23c9f1ea21310ce6e5a1b29c4";
    };
    features = builtins.concatLists [
      ["default"]
      ["std"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" = overridableMkRustCrate (profileName: rec {
    name = "serde";
    version = "1.0.164";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "9e8c8cf938e98f769bc164923b06dce91cea1751522f46f8466461af04c9027d";
    };
    features = builtins.concatLists [
      ["alloc"]
      ["default"]
      ["derive"]
      ["rc"]
      ["serde_derive"]
      ["std"]
    ];
    dependencies = {
      serde_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.164" {profileName = "__noProfile";};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.164" = overridableMkRustCrate (profileName: rec {
    name = "serde_derive";
    version = "1.0.164";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "d9735b638ccc51c28bf6914d90a2e9725b377144fc612c49a611fddd1b631d68";
    };
    features = builtins.concatLists [
      ["default"]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" {inherit profileName;};
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" {inherit profileName;};
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.18" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.82" = overridableMkRustCrate (profileName: rec {
    name = "serde_json";
    version = "1.0.82";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "82c2c1fdcd807d1098552c5b9a36e425e42e9fbd7c6a37a8425f390f781f7fa7";
    };
    features = builtins.concatLists [
      ["alloc"]
      ["default"]
      ["raw_value"]
      ["std"]
    ];
    dependencies = {
      itoa = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.2" {inherit profileName;};
      ryu = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.10" {inherit profileName;};
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".serde_qs."0.10.1" = overridableMkRustCrate (profileName: rec {
    name = "serde_qs";
    version = "0.10.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "8cac3f1e2ca2fe333923a1ae72caca910b98ed0630bb35ef6f8c8517d6e81afa";
    };
    features = builtins.concatLists [
      ["default"]
    ];
    dependencies = {
      percent_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" {inherit profileName;};
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" {inherit profileName;};
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.37" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".serde_urlencoded."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "serde_urlencoded";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "d3491c14715ca2294c4d6a88f15e84739788c1d030eed8c110436aafdaa2f3fd";
    };
    dependencies = {
      form_urlencoded = rustPackages."registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.0.1" {inherit profileName;};
      itoa = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.2" {inherit profileName;};
      ryu = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.10" {inherit profileName;};
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".serde_with."2.3.3" = overridableMkRustCrate (profileName: rec {
    name = "serde_with";
    version = "2.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "07ff71d2c147a7b57362cead5e22f772cd52f6ab31cfcd9edcd7f6aeb2a0afbe";
    };
    features = builtins.concatLists [
      ["alloc"]
      ["default"]
      ["macros"]
      ["std"]
    ];
    dependencies = {
      base64 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.0" {inherit profileName;};
      chrono_0_4 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.23" {inherit profileName;};
      hex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" {inherit profileName;};
      indexmap_1 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.1" {inherit profileName;};
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" {inherit profileName;};
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.82" {inherit profileName;};
      serde_with_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_with_macros."2.3.3" {profileName = "__noProfile";};
      time_0_3 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.17" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".serde_with_macros."2.3.3" = overridableMkRustCrate (profileName: rec {
    name = "serde_with_macros";
    version = "2.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "881b6f881b17d13214e5d494c939ebab463d01264ce1811e9d4ac3a882e7695f";
    };
    dependencies = {
      darling = rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling."0.20.1" {inherit profileName;};
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" {inherit profileName;};
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" {inherit profileName;};
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.18" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".sha1."0.10.5" = overridableMkRustCrate (profileName: rec {
    name = "sha1";
    version = "0.10.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "f04293dc80c3993519f2d7f6f511707ee7094fe0c6d3406feb330cdb3540eba3";
    };
    features = builtins.concatLists [
      ["default"]
      ["std"]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {inherit profileName;};
      ${
        if hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64"
        then "cpufeatures"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.5" {inherit profileName;};
      digest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.6" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".sharded-slab."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "sharded-slab";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "900fba806f70c630b0a382d0d825e17a0f19fcd059a2ade1ff237bcddf446b31";
    };
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".signal-hook-registry."1.4.0" = overridableMkRustCrate (profileName: rec {
    name = "signal-hook-registry";
    version = "1.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "e51e73328dc4ac0c7ccbda3a494dfa03df1de2f46018127f60c693f2648455b0";
    };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".slab."0.4.6" = overridableMkRustCrate (profileName: rec {
    name = "slab";
    version = "0.4.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "eb703cfe953bccee95685111adeedb76fabe4e97549a58d16f03ea7b9367bb32";
    };
    features = builtins.concatLists [
      ["default"]
      ["std"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".smallvec."1.9.0" = overridableMkRustCrate (profileName: rec {
    name = "smallvec";
    version = "1.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "2fd0db749597d91ff862fd1d55ea87f7855a744a8425a64695b6fca237d1dad1";
    };
    features = builtins.concatLists [
      ["write"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".snafu."0.6.10" = overridableMkRustCrate (profileName: rec {
    name = "snafu";
    version = "0.6.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "eab12d3c261b2308b0d80c26fffb58d17eba81a4be97890101f416b478c79ca7";
    };
    features = builtins.concatLists [
      ["default"]
      ["guide"]
      ["std"]
    ];
    dependencies = {
      doc_comment = rustPackages."registry+https://github.com/rust-lang/crates.io-index".doc-comment."0.3.3" {inherit profileName;};
      snafu_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".snafu-derive."0.6.10" {profileName = "__noProfile";};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".snafu-derive."0.6.10" = overridableMkRustCrate (profileName: rec {
    name = "snafu-derive";
    version = "0.6.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "1508efa03c362e23817f96cde18abed596a25219a8b2c66e8db33c03543d315b";
    };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" {inherit profileName;};
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" {inherit profileName;};
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".socket2."0.4.9" = overridableMkRustCrate (profileName: rec {
    name = "socket2";
    version = "0.4.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "64a4a911eed85daf18834cfaa86a79b7d266ff93ff5ba14005426219480ed662";
    };
    features = builtins.concatLists [
      ["all"]
    ];
    dependencies = {
      ${
        if hostPlatform.isUnix
        then "libc"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" {inherit profileName;};
      ${
        if hostPlatform.isWindows
        then "winapi"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".strsim."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "strsim";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" = overridableMkRustCrate (profileName: rec {
    name = "syn";
    version = "1.0.109";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237";
    };
    features = builtins.concatLists [
      ["clone-impls"]
      ["default"]
      ["derive"]
      ["extra-traits"]
      ["full"]
      ["parsing"]
      ["printing"]
      ["proc-macro"]
      ["quote"]
      ["visit"]
      ["visit-mut"]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" {inherit profileName;};
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" {inherit profileName;};
      unicode_ident = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.2" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".syn."2.0.18" = overridableMkRustCrate (profileName: rec {
    name = "syn";
    version = "2.0.18";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "32d41677bcbe24c20c52e7c70b0d8db04134c5d1066bf98662e2871ad200ea3e";
    };
    features = builtins.concatLists [
      ["clone-impls"]
      ["default"]
      ["derive"]
      ["extra-traits"]
      ["full"]
      ["parsing"]
      ["printing"]
      ["proc-macro"]
      ["quote"]
      ["visit-mut"]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" {inherit profileName;};
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" {inherit profileName;};
      unicode_ident = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.2" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".task-local-extensions."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "task-local-extensions";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "4167afbec18ae012de40f8cf1b9bf48420abb390678c34821caa07d924941cc4";
    };
    dependencies = {
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.28.2" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".tempfile."3.3.0" = overridableMkRustCrate (profileName: rec {
    name = "tempfile";
    version = "3.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "5cdb1ef4eaeeaddc8fbd371e5017057064af0911902ef36b39801f67cc6d79e4";
    };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {inherit profileName;};
      fastrand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."1.7.0" {inherit profileName;};
      ${
        if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "wasi"
        then "libc"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" {inherit profileName;};
      ${
        if hostPlatform.parsed.kernel.name == "redox"
        then "syscall"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.13" {inherit profileName;};
      remove_dir_all = rustPackages."registry+https://github.com/rust-lang/crates.io-index".remove_dir_all."0.5.3" {inherit profileName;};
      ${
        if hostPlatform.isWindows
        then "winapi"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".termcolor."1.1.3" = overridableMkRustCrate (profileName: rec {
    name = "termcolor";
    version = "1.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "bab24d30b911b2376f3a13cc2cd443142f0c81dda04c118693e35b3835757755";
    };
    dependencies = {
      ${
        if hostPlatform.isWindows
        then "winapi_util"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.5" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.37" = overridableMkRustCrate (profileName: rec {
    name = "thiserror";
    version = "1.0.37";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "10deb33631e3c9018b9baf9dcbbc4f737320d2b576bac10f6aefa048fa407e3e";
    };
    dependencies = {
      thiserror_impl = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."1.0.37" {profileName = "__noProfile";};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."1.0.37" = overridableMkRustCrate (profileName: rec {
    name = "thiserror-impl";
    version = "1.0.37";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "982d17546b47146b28f7c22e3d08465f6b8903d0ea13c1660d9d84a6e7adcdbb";
    };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" {inherit profileName;};
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" {inherit profileName;};
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".thread_local."1.1.4" = overridableMkRustCrate (profileName: rec {
    name = "thread_local";
    version = "1.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "5516c27b78311c50bf42c071425c560ac799b11c30b31f87e3081965fe5e0180";
    };
    dependencies = {
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".threadpool."1.8.1" = overridableMkRustCrate (profileName: rec {
    name = "threadpool";
    version = "1.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "d050e60b33d41c19108b32cea32164033a9013fe3b46cbd4457559bfbf77afaa";
    };
    dependencies = {
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "num_cpus"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.14.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".thrift."0.16.0" = overridableMkRustCrate (profileName: rec {
    name = "thrift";
    version = "0.16.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "09678c4cdbb4eed72e18b7c2af1329c69825ed16fcbac62d083fc3e2b0590ff0";
    };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger") "default")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger") "log")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger") "server")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger") "threadpool")
    ];
    dependencies = {
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "byteorder"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "integer_encoding"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".integer-encoding."3.0.4" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "log"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "ordered_float"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".ordered-float."1.1.1" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/opentelemetry-jaeger"
        then "threadpool"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".threadpool."1.8.1" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".time."0.1.44" = overridableMkRustCrate (profileName: rec {
    name = "time";
    version = "0.1.44";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "6db9e6914ab8b1ae1c260a4ae7a49b6c5611b40328a735b21862567685e73255";
    };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" {inherit profileName;};
      ${
        if hostPlatform.parsed.kernel.name == "wasi"
        then "wasi"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.10.0+wasi-snapshot-preview1" {inherit profileName;};
      ${
        if hostPlatform.isWindows
        then "winapi"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".time."0.3.17" = overridableMkRustCrate (profileName: rec {
    name = "time";
    version = "0.3.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "a561bf4617eebd33bca6434b988f39ed798e527f51a1e797d0ee4f61c0a38376";
    };
    features = builtins.concatLists [
      ["alloc"]
      ["formatting"]
      ["macros"]
      ["parsing"]
      ["serde"]
      ["serde-well-known"]
      ["std"]
    ];
    dependencies = {
      itoa = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.2" {inherit profileName;};
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" {inherit profileName;};
      time_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".time-core."0.1.0" {inherit profileName;};
      time_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".time-macros."0.2.6" {profileName = "__noProfile";};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".time-core."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "time-core";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "2e153e1f1acaef8acc537e68b44906d2db6436e2b35ac2c6b42640fff91f00fd";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".time-macros."0.2.6" = overridableMkRustCrate (profileName: rec {
    name = "time-macros";
    version = "0.2.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "d967f99f534ca7e495c575c62638eebc2898a8c84c119b89e250477bc4ba16b2";
    };
    features = builtins.concatLists [
      ["formatting"]
      ["parsing"]
      ["serde"]
    ];
    dependencies = {
      time_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".time-core."0.1.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.6.0" = overridableMkRustCrate (profileName: rec {
    name = "tinyvec";
    version = "1.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "87cc5ceb3875bb20c2890005a4e226a4651264a5c75edb2421b52861a0a0cb50";
    };
    features = builtins.concatLists [
      ["alloc"]
      ["default"]
      ["tinyvec_macros"]
    ];
    dependencies = {
      tinyvec_macros = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec_macros."0.1.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".tinyvec_macros."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "tinyvec_macros";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "cda74da7e1a664f795bb1f8a87ec406fb89a02522cf6e50620d016add6dbbf5c";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".tokio."1.28.2" = overridableMkRustCrate (profileName: rec {
    name = "tokio";
    version = "1.28.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "94d7b1cfd2aa4011f2de74c2c4c63665e27a71006b0a192dcd2710272e73dfa2";
    };
    features = builtins.concatLists [
      ["bytes"]
      ["default"]
      ["fs"]
      ["full"]
      ["io-std"]
      ["io-util"]
      ["libc"]
      ["macros"]
      ["mio"]
      ["net"]
      ["num_cpus"]
      ["parking_lot"]
      ["process"]
      ["rt"]
      ["rt-multi-thread"]
      ["signal"]
      ["signal-hook-registry"]
      ["socket2"]
      ["sync"]
      ["time"]
      ["tokio-macros"]
      ["windows-sys"]
    ];
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.4.0" {inherit profileName;};
      ${
        if hostPlatform.isUnix
        then "libc"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" {inherit profileName;};
      mio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio."0.8.4" {inherit profileName;};
      num_cpus = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.14.0" {inherit profileName;};
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" {inherit profileName;};
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.9" {inherit profileName;};
      ${
        if hostPlatform.isUnix
        then "signal_hook_registry"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".signal-hook-registry."1.4.0" {inherit profileName;};
      ${
        if !(hostPlatform.parsed.cpu.name == "wasm32" || hostPlatform.parsed.cpu.name == "wasm64")
        then "socket2"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.4.9" {inherit profileName;};
      tokio_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-macros."2.1.0" {profileName = "__noProfile";};
      ${
        if hostPlatform.isWindows
        then "windows_sys"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" {inherit profileName;};
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" {profileName = "__noProfile";};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".tokio-macros."2.1.0" = overridableMkRustCrate (profileName: rec {
    name = "tokio-macros";
    version = "2.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "630bdcf245f78637c13ec01ffae6187cca34625e8c63150d424b59e55af2675e";
    };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" {inherit profileName;};
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" {inherit profileName;};
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.18" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".tokio-native-tls."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "tokio-native-tls";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "f7d995660bd2b7f8c1568414c1126076c13fbb725c40112dc0120b78eb9b717b";
    };
    dependencies = {
      native_tls = rustPackages."registry+https://github.com/rust-lang/crates.io-index".native-tls."0.2.11" {inherit profileName;};
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.28.2" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".tokio-stream."0.1.11" = overridableMkRustCrate (profileName: rec {
    name = "tokio-stream";
    version = "0.1.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "d660770404473ccd7bc9f8b28494a811bc18542b915c0855c51e8f419d5223ce";
    };
    features = builtins.concatLists [
      ["default"]
      ["time"]
    ];
    dependencies = {
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.28" {inherit profileName;};
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.9" {inherit profileName;};
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.28.2" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.3" = overridableMkRustCrate (profileName: rec {
    name = "tokio-util";
    version = "0.7.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "cc463cd8deddc3770d20f9852143d50bf6094e640b485cb2e189a2099085ff45";
    };
    features = builtins.concatLists [
      ["codec"]
      ["default"]
      ["io"]
      ["tracing"]
    ];
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.4.0" {inherit profileName;};
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.28" {inherit profileName;};
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.28" {inherit profileName;};
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.9" {inherit profileName;};
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.28.2" {inherit profileName;};
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.37" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "tower-service";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "b6bc1c9ce2b5135ac7f93c72918fc37feb872bdc6a5533a8b85eb4b86bfdae52";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.37" = overridableMkRustCrate (profileName: rec {
    name = "tracing";
    version = "0.1.37";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "8ce8c33a8d48bd45d624a6e523445fd21ec13d3653cd51f681abf67418f54eb8";
    };
    features = builtins.concatLists [
      ["attributes"]
      ["default"]
      ["log"]
      ["std"]
      ["tracing-attributes"]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {inherit profileName;};
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" {inherit profileName;};
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.9" {inherit profileName;};
      tracing_attributes = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-attributes."0.1.23" {profileName = "__noProfile";};
      tracing_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.30" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".tracing-actix-web."0.7.2" = overridableMkRustCrate (profileName: rec {
    name = "tracing-actix-web";
    version = "0.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "4082e4d81173e0b7ad3cfb71e9eaef0dd0cbb7b139fdb56394f488a3b0760b23";
    };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/tracing-actix-web") "default")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/tracing-actix-web") "emit_event_on_error")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/tracing-actix-web") "opentelemetry_0_18")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/tracing-actix-web") "opentelemetry_0_18_pkg")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/tracing-actix-web") "tracing-opentelemetry_0_18_pkg")
    ];
    dependencies = {
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/tracing-actix-web"
        then "actix_web"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".actix-web."4.2.1" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/tracing-actix-web"
        then "opentelemetry_0_18_pkg"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".opentelemetry."0.18.0" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/tracing-actix-web"
        then "pin_project"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.0.12" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/tracing-actix-web"
        then "tracing"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.37" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/tracing-actix-web"
        then "tracing_opentelemetry_0_18_pkg"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-opentelemetry."0.18.0" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/tracing-actix-web"
        then "uuid"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."1.1.2" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".tracing-attributes."0.1.23" = overridableMkRustCrate (profileName: rec {
    name = "tracing-attributes";
    version = "0.1.23";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "4017f8f45139870ca7e672686113917c71c7a6e02d4924eda67186083c03081a";
    };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" {inherit profileName;};
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" {inherit profileName;};
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.30" = overridableMkRustCrate (profileName: rec {
    name = "tracing-core";
    version = "0.1.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "24eb03ba0eab1fd845050058ce5e616558e8f8d8fca633e6b163fe25c797213a";
    };
    features = builtins.concatLists [
      ["default"]
      ["once_cell"]
      ["std"]
      ["valuable"]
    ];
    dependencies = {
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" {inherit profileName;};
      ${
        if false
        then "valuable"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".valuable."0.1.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".tracing-forest."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "tracing-forest";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "119324027fc01804d9f83aefb7d80fda2e8fbe7c28e0acc59187cbd751a12915";
    };
    features = builtins.concatLists [
      ["default"]
      ["smallvec"]
      ["tokio"]
    ];
    dependencies = {
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.9.0" {inherit profileName;};
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.37" {inherit profileName;};
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.28.2" {inherit profileName;};
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.37" {inherit profileName;};
      tracing_subscriber = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.3.16" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".tracing-log."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "tracing-log";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "78ddad33d2d10b1ed7eb9d1f518a5674713876e97e5bb9b7345a7984fbb4f922";
    };
    features = builtins.concatLists [
      ["default"]
      ["log-tracer"]
      ["std"]
      ["trace-logger"]
    ];
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" {inherit profileName;};
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" {inherit profileName;};
      tracing_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.30" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".tracing-opentelemetry."0.18.0" = overridableMkRustCrate (profileName: rec {
    name = "tracing-opentelemetry";
    version = "0.18.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "21ebb87a95ea13271332df069020513ab70bdb5637ca42d6e492dc3bbbad48de";
    };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry") "default")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry") "metrics")
      (lib.optional (rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry") "tracing-log")
    ];
    dependencies = {
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "once_cell"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "opentelemetry"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".opentelemetry."0.18.0" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "tracing"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.37" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "tracing_core"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.30" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "tracing_log"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-log."0.1.3" {inherit profileName;};
      ${
        if rootFeatures' ? "iot_emulation/jaeger" || rootFeatures' ? "iot_emulation/reqwest-tracing" || rootFeatures' ? "iot_emulation/tracing-actix-web" || rootFeatures' ? "iot_emulation/tracing-opentelemetry"
        then "tracing_subscriber"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.3.16" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".tracing-serde."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "tracing-serde";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "bc6b213177105856957181934e4920de57730fc69bf42c37ee5bb664d406d9e1";
    };
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" {inherit profileName;};
      tracing_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.30" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.2.25" = overridableMkRustCrate (profileName: rec {
    name = "tracing-subscriber";
    version = "0.2.25";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "0e0d2eaa99c3c2e41547cfa109e910a68ea03823cccad4a0525dcbc9b01e8c71";
    };
    features = builtins.concatLists [
      ["ansi"]
      ["ansi_term"]
      ["chrono"]
      ["env-filter"]
      ["fmt"]
      ["json"]
      ["lazy_static"]
      ["matchers"]
      ["parking_lot"]
      ["regex"]
      ["registry"]
      ["serde"]
      ["serde_json"]
      ["sharded-slab"]
      ["smallvec"]
      ["thread_local"]
      ["tracing"]
      ["tracing-serde"]
    ];
    dependencies = {
      ansi_term = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ansi_term."0.12.1" {inherit profileName;};
      chrono = rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.23" {inherit profileName;};
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" {inherit profileName;};
      matchers = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matchers."0.0.1" {inherit profileName;};
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" {inherit profileName;};
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.8.4" {inherit profileName;};
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" {inherit profileName;};
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.82" {inherit profileName;};
      sharded_slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sharded-slab."0.1.4" {inherit profileName;};
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.9.0" {inherit profileName;};
      thread_local = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thread_local."1.1.4" {inherit profileName;};
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.37" {inherit profileName;};
      tracing_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.30" {inherit profileName;};
      tracing_serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-serde."0.1.3" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.3.16" = overridableMkRustCrate (profileName: rec {
    name = "tracing-subscriber";
    version = "0.3.16";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "a6176eae26dd70d0c919749377897b54a9276bd7061339665dd68777926b5a70";
    };
    features = builtins.concatLists [
      ["alloc"]
      ["ansi"]
      ["default"]
      ["env-filter"]
      ["fmt"]
      ["matchers"]
      ["nu-ansi-term"]
      ["once_cell"]
      ["regex"]
      ["registry"]
      ["sharded-slab"]
      ["smallvec"]
      ["std"]
      ["thread_local"]
      ["tracing"]
      ["tracing-log"]
    ];
    dependencies = {
      matchers = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matchers."0.1.0" {inherit profileName;};
      nu_ansi_term = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nu-ansi-term."0.46.0" {inherit profileName;};
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" {inherit profileName;};
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.8.4" {inherit profileName;};
      sharded_slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sharded-slab."0.1.4" {inherit profileName;};
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.9.0" {inherit profileName;};
      thread_local = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thread_local."1.1.4" {inherit profileName;};
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.37" {inherit profileName;};
      tracing_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.30" {inherit profileName;};
      tracing_log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-log."0.1.3" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".try-lock."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "try-lock";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "59547bce71d9c38b83d9c0e92b6066c4253371f15005def0c30d9657f50c7642";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".typenum."1.16.0" = overridableMkRustCrate (profileName: rec {
    name = "typenum";
    version = "1.16.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "497961ef93d974e23eb6f433eb5fe1b7930b659f06d12dec6fc44a8f554c0bba";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".unicase."2.6.0" = overridableMkRustCrate (profileName: rec {
    name = "unicase";
    version = "2.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "50f37be617794602aabbeee0be4f259dc1778fabe05e2d67ee8f79326d5cb4f6";
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" {profileName = "__noProfile";};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".unicode-bidi."0.3.8" = overridableMkRustCrate (profileName: rec {
    name = "unicode-bidi";
    version = "0.3.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "099b7128301d285f79ddd55b9a83d5e6b9e97c92e0ea0daebee7263e932de992";
    };
    features = builtins.concatLists [
      ["default"]
      ["hardcoded-data"]
      ["std"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "unicode-ident";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "15c61ba63f9235225a22310255a29b806b907c9b8c964bcbd0a2c70f3f2deea7";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.21" = overridableMkRustCrate (profileName: rec {
    name = "unicode-normalization";
    version = "0.1.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "854cbdc4f7bc6ae19c820d44abdc3277ac3e1b2b93db20a636825d9322fb60e6";
    };
    features = builtins.concatLists [
      ["default"]
      ["std"]
    ];
    dependencies = {
      tinyvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.6.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".unicode-segmentation."1.10.1" = overridableMkRustCrate (profileName: rec {
    name = "unicode-segmentation";
    version = "1.10.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "1dd624098567895118886609431a7c3b8f516e41d30e0643f03d94592a147e36";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.10" = overridableMkRustCrate (profileName: rec {
    name = "unicode-width";
    version = "0.1.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "c0edd1e5b14653f783770bce4a4dabb4a5108a5370a5f5d8cfe8710c361f6c8b";
    };
    features = builtins.concatLists [
      ["default"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".uom."0.34.0" = overridableMkRustCrate (profileName: rec {
    name = "uom";
    version = "0.34.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "e8f50eddd69f656ee545f7663ea5fefb7c789bc1a0d11124e049715f563a16a4";
    };
    features = builtins.concatLists [
      ["autoconvert"]
      ["f64"]
      ["si"]
    ];
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.15" {inherit profileName;};
      typenum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.16.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".url."2.2.2" = overridableMkRustCrate (profileName: rec {
    name = "url";
    version = "2.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "a507c383b2d33b5fc35d1861e77e6b383d158b2da5e14fe51b83dfedf6fd578c";
    };
    dependencies = {
      form_urlencoded = rustPackages."registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.0.1" {inherit profileName;};
      idna = rustPackages."registry+https://github.com/rust-lang/crates.io-index".idna."0.2.3" {inherit profileName;};
      matches = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matches."0.1.9" {inherit profileName;};
      percent_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".uuid."1.1.2" = overridableMkRustCrate (profileName: rec {
    name = "uuid";
    version = "1.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "dd6469f4314d5f1ffec476e05f17cc9a78bc7a27a6a857842170bdf8d6f98d2f";
    };
    features = builtins.concatLists [
      ["default"]
      ["fast-rng"]
      ["private_getrandom"]
      ["private_rand"]
      ["rng"]
      ["serde"]
      ["std"]
      ["v4"]
    ];
    dependencies = {
      private_getrandom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.7" {inherit profileName;};
      private_rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" {inherit profileName;};
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.164" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".valuable."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "valuable";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "830b7e5d4d90034032940e4ace0d9a9a057e7a45cd94e6c007832e39edb82f6d";
    };
    features = builtins.concatLists [
      ["alloc"]
      ["std"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".vcpkg."0.2.15" = overridableMkRustCrate (profileName: rec {
    name = "vcpkg";
    version = "0.2.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "accd4ea62f7bb7a82fe23066fb0957d48ef677f6eeb8215f372f52e48bb32426";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" = overridableMkRustCrate (profileName: rec {
    name = "version_check";
    version = "0.9.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".want."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "want";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "1ce8a968cb1cd110d136ff8b819a556d6fb6d919363c61534f6860c7eb172ba0";
    };
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" {inherit profileName;};
      try_lock = rustPackages."registry+https://github.com/rust-lang/crates.io-index".try-lock."0.2.3" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".wasi."0.10.0+wasi-snapshot-preview1" = overridableMkRustCrate (profileName: rec {
    name = "wasi";
    version = "0.10.0+wasi-snapshot-preview1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "1a143597ca7c7793eff794def352d41792a93c481eb1042423ff7ff72ba2c31f";
    };
    features = builtins.concatLists [
      ["default"]
      ["std"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1" = overridableMkRustCrate (profileName: rec {
    name = "wasi";
    version = "0.11.0+wasi-snapshot-preview1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423";
    };
    features = builtins.concatLists [
      ["default"]
      ["std"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.81" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen";
    version = "0.2.81";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "7c53b543413a17a202f4be280a7e5c62a1c69345f5de525ee64f8cfdbc954994";
    };
    features = builtins.concatLists [
      ["default"]
      ["spans"]
      ["std"]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {inherit profileName;};
      wasm_bindgen_macro = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro."0.2.81" {profileName = "__noProfile";};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-backend."0.2.81" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-backend";
    version = "0.2.81";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "5491a68ab4500fa6b4d726bd67408630c3dbe9c4fe7bda16d5c82a1fd8c7340a";
    };
    features = builtins.concatLists [
      ["spans"]
    ];
    dependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.10.0" {inherit profileName;};
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" {inherit profileName;};
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.17" {inherit profileName;};
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" {inherit profileName;};
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" {inherit profileName;};
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" {inherit profileName;};
      wasm_bindgen_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.81" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.31" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-futures";
    version = "0.4.31";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "de9a9cec1733468a8c657e57fa2413d2ae2c0129b95e87c5b72b8ace4d13f31f";
    };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {inherit profileName;};
      js_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.58" {inherit profileName;};
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.81" {inherit profileName;};
      ${
        if builtins.elem "atomics" hostPlatformFeatures
        then "web_sys"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.58" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro."0.2.81" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-macro";
    version = "0.2.81";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "c441e177922bc58f1e12c022624b6216378e5febc2f0533e41ba443d505b80aa";
    };
    features = builtins.concatLists [
      ["spans"]
    ];
    dependencies = {
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" {inherit profileName;};
      wasm_bindgen_macro_support = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro-support."0.2.81" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro-support."0.2.81" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-macro-support";
    version = "0.2.81";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "7d94ac45fcf608c1f45ef53e748d35660f168490c10b23704c7779ab8f5c3048";
    };
    features = builtins.concatLists [
      ["spans"]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.60" {inherit profileName;};
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.28" {inherit profileName;};
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" {inherit profileName;};
      wasm_bindgen_backend = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-backend."0.2.81" {inherit profileName;};
      wasm_bindgen_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.81" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.81" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-shared";
    version = "0.2.81";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "6a89911bd99e5f3659ec4acf9c4d93b0a90fe4a2a11f15328472058edc5261be";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".wasm-streams."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "wasm-streams";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "6bbae3363c08332cadccd13b67db371814cd214c2524020932f0804b8cf7c078";
    };
    dependencies = {
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.28" {inherit profileName;};
      js_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.58" {inherit profileName;};
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.81" {inherit profileName;};
      wasm_bindgen_futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.31" {inherit profileName;};
      web_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.58" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.58" = overridableMkRustCrate (profileName: rec {
    name = "web-sys";
    version = "0.3.58";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "2fed94beee57daf8dd7d51f2b15dc2bcde92d7a72304cdf662a4371008b71b90";
    };
    features = builtins.concatLists [
      ["AbortController"]
      ["AbortSignal"]
      ["Blob"]
      ["BlobPropertyBag"]
      ["Event"]
      ["EventTarget"]
      ["File"]
      ["FormData"]
      ["Headers"]
      ["MessageEvent"]
      ["ReadableStream"]
      ["Request"]
      ["RequestCredentials"]
      ["RequestInit"]
      ["RequestMode"]
      ["Response"]
      ["ServiceWorkerGlobalScope"]
      ["Window"]
      ["Worker"]
      ["WorkerGlobalScope"]
    ];
    dependencies = {
      js_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.58" {inherit profileName;};
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.81" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" = overridableMkRustCrate (profileName: rec {
    name = "winapi";
    version = "0.3.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419";
    };
    features = builtins.concatLists [
      ["activation"]
      ["combaseapi"]
      ["consoleapi"]
      ["errhandlingapi"]
      ["fileapi"]
      ["handleapi"]
      ["impl-debug"]
      ["impl-default"]
      ["minwinbase"]
      ["minwindef"]
      ["ntdef"]
      ["ntstatus"]
      ["objbase"]
      ["processenv"]
      ["profileapi"]
      ["roapi"]
      ["std"]
      ["sysinfoapi"]
      ["timezoneapi"]
      ["winbase"]
      ["wincon"]
      ["winerror"]
      ["winnt"]
      ["winreg"]
      ["winstring"]
      ["ws2ipdef"]
      ["ws2tcpip"]
    ];
    dependencies = {
      ${
        if hostPlatform.config == "i686-pc-windows-gnu"
        then "winapi_i686_pc_windows_gnu"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-i686-pc-windows-gnu."0.4.0" {inherit profileName;};
      ${
        if hostPlatform.config == "x86_64-pc-windows-gnu"
        then "winapi_x86_64_pc_windows_gnu"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-x86_64-pc-windows-gnu."0.4.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".winapi-i686-pc-windows-gnu."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "winapi-i686-pc-windows-gnu";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "winapi-util";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "70ec6ce85bb158151cae5e5c87f95a8e97d2c0c4b001223f33a334e3ce5de178";
    };
    dependencies = {
      ${
        if hostPlatform.isWindows
        then "winapi"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".winapi-x86_64-pc-windows-gnu."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "winapi-x86_64-pc-windows-gnu";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.36.1" = overridableMkRustCrate (profileName: rec {
    name = "windows-sys";
    version = "0.36.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "ea04155a16a59f9eab786fe12a4a450e75cdb175f9e0d80da1e17db09f55b8d2";
    };
    features = builtins.concatLists [
      ["Win32"]
      ["Win32_Foundation"]
      ["Win32_Networking"]
      ["Win32_Networking_WinSock"]
      ["Win32_Security"]
      ["Win32_Security_Authentication"]
      ["Win32_Security_Authentication_Identity"]
      ["Win32_Security_Credentials"]
      ["Win32_Security_Cryptography"]
      ["Win32_Storage"]
      ["Win32_Storage_FileSystem"]
      ["Win32_System"]
      ["Win32_System_IO"]
      ["Win32_System_LibraryLoader"]
      ["Win32_System_Memory"]
      ["Win32_System_Pipes"]
      ["Win32_System_SystemServices"]
      ["Win32_System_WindowsProgramming"]
      ["default"]
    ];
    dependencies = {
      ${
        if hostPlatform.config == "aarch64-pc-windows-msvc" || hostPlatform.config == "aarch64-uwp-windows-msvc"
        then "windows_aarch64_msvc"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.36.1" {inherit profileName;};
      ${
        if hostPlatform.config == "i686-pc-windows-gnu" || hostPlatform.config == "i686-uwp-windows-gnu"
        then "windows_i686_gnu"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.36.1" {inherit profileName;};
      ${
        if hostPlatform.config == "i686-pc-windows-msvc" || hostPlatform.config == "i686-uwp-windows-msvc"
        then "windows_i686_msvc"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.36.1" {inherit profileName;};
      ${
        if hostPlatform.config == "x86_64-pc-windows-gnu" || hostPlatform.config == "x86_64-uwp-windows-gnu"
        then "windows_x86_64_gnu"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.36.1" {inherit profileName;};
      ${
        if hostPlatform.config == "x86_64-pc-windows-msvc" || hostPlatform.config == "x86_64-uwp-windows-msvc"
        then "windows_x86_64_msvc"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.36.1" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" = overridableMkRustCrate (profileName: rec {
    name = "windows-sys";
    version = "0.48.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9";
    };
    features = builtins.concatLists [
      ["Win32"]
      ["Win32_Foundation"]
      ["Win32_Security"]
      ["Win32_Security_Authorization"]
      ["Win32_Storage"]
      ["Win32_Storage_FileSystem"]
      ["Win32_System"]
      ["Win32_System_Console"]
      ["Win32_System_Pipes"]
      ["Win32_System_SystemServices"]
      ["Win32_System_Threading"]
      ["Win32_System_WindowsProgramming"]
      ["default"]
    ];
    dependencies = {
      windows_targets = rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.48.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.48.0" = overridableMkRustCrate (profileName: rec {
    name = "windows-targets";
    version = "0.48.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "7b1eb6f0cd7c80c79759c929114ef071b87354ce476d9d94271031c0497adfd5";
    };
    dependencies = {
      ${
        if false
        then "windows_aarch64_gnullvm"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.48.0" {inherit profileName;};
      ${
        if hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.abi.name == "msvc"
        then "windows_aarch64_msvc"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.48.0" {inherit profileName;};
      ${
        if hostPlatform.parsed.cpu.name == "i686" && hostPlatform.parsed.abi.name == "gnu"
        then "windows_i686_gnu"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.48.0" {inherit profileName;};
      ${
        if hostPlatform.parsed.cpu.name == "i686" && hostPlatform.parsed.abi.name == "msvc"
        then "windows_i686_msvc"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.48.0" {inherit profileName;};
      ${
        if hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.abi.name == "gnu"
        then "windows_x86_64_gnu"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.48.0" {inherit profileName;};
      ${
        if false
        then "windows_x86_64_gnullvm"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.48.0" {inherit profileName;};
      ${
        if hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.abi.name == "msvc"
        then "windows_x86_64_msvc"
        else null
      } =
        rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.48.0" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.48.0" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_gnullvm";
    version = "0.48.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "91ae572e1b79dba883e0d315474df7305d12f569b400fcf90581b06062f7e1bc";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.36.1" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_msvc";
    version = "0.36.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "9bb8c3fd39ade2d67e9874ac4f3db21f0d710bee00fe7cab16949ec184eeaa47";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.48.0" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_msvc";
    version = "0.48.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "b2ef27e0d7bdfcfc7b868b317c1d32c641a6fe4629c171b8928c7b08d98d7cf3";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.36.1" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_gnu";
    version = "0.36.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "180e6ccf01daf4c426b846dfc66db1fc518f074baa793aa7d9b9aaeffad6a3b6";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.48.0" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_gnu";
    version = "0.48.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "622a1962a7db830d6fd0a69683c80a18fda201879f0f447f065a3b7467daa241";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.36.1" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_msvc";
    version = "0.36.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "e2e7917148b2812d1eeafaeb22a97e4813dfa60a3f8f78ebe204bcc88f12f024";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.48.0" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_msvc";
    version = "0.48.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "4542c6e364ce21bf45d69fdd2a8e455fa38d316158cfd43b3ac1c5b1b19f8e00";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.36.1" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnu";
    version = "0.36.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "4dcd171b8776c41b97521e5da127a2d86ad280114807d0b2ab1e462bc764d9e1";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.48.0" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnu";
    version = "0.48.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "ca2b8a661f7628cbd23440e50b05d705db3686f894fc9580820623656af974b1";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.48.0" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnullvm";
    version = "0.48.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "7896dbc1f41e08872e9d5e8f8baa8fdd2677f29468c4e156210174edc7f7b953";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.36.1" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_msvc";
    version = "0.36.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "c811ca4a8c853ef420abd8592ba53ddbbac90410fab6903b3e79972a631f7680";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.48.0" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_msvc";
    version = "0.48.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "1a515f5799fe4961cb532f983ce2b23082366b898e52ffbce459c86f67c8378a";
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".winreg."0.10.1" = overridableMkRustCrate (profileName: rec {
    name = "winreg";
    version = "0.10.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "80d0f4e272c85def139476380b12f9ac60926689dd2e01d4923222f40580869d";
    };
    dependencies = {
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" = overridableMkRustCrate (profileName: rec {
    name = "zeroize";
    version = "1.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "2a0956f1ba7c7909bfb66c2e9e4124ab6f6482560f6628b5aaeba39207c9aad9";
    };
    features = builtins.concatLists [
      ["alloc"]
    ];
  });

  "registry+https://github.com/rust-lang/crates.io-index".zstd."0.11.2+zstd.1.5.2" = overridableMkRustCrate (profileName: rec {
    name = "zstd";
    version = "0.11.2+zstd.1.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "20cc960326ece64f010d2d2107537f26dc589a6573a316bd5b1dba685fa5fde4";
    };
    features = builtins.concatLists [
      ["arrays"]
      ["default"]
      ["legacy"]
      ["zdict_builder"]
    ];
    dependencies = {
      zstd_safe = rustPackages."registry+https://github.com/rust-lang/crates.io-index".zstd-safe."5.0.2+zstd.1.5.2" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".zstd-safe."5.0.2+zstd.1.5.2" = overridableMkRustCrate (profileName: rec {
    name = "zstd-safe";
    version = "5.0.2+zstd.1.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "1d2a5585e04f9eea4b2a3d1eca508c4dee9592a89ef6f450c11719da0726f4db";
    };
    features = builtins.concatLists [
      ["arrays"]
      ["legacy"]
      ["std"]
      ["zdict_builder"]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" {inherit profileName;};
      zstd_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".zstd-sys."2.0.4+zstd.1.5.2" {inherit profileName;};
    };
  });

  "registry+https://github.com/rust-lang/crates.io-index".zstd-sys."2.0.4+zstd.1.5.2" = overridableMkRustCrate (profileName: rec {
    name = "zstd-sys";
    version = "2.0.4+zstd.1.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo {
      inherit name version;
      sha256 = "4fa202f2ef00074143e219d15b62ffc317d17cc33909feac471c044087cad7b0";
    };
    features = builtins.concatLists [
      ["legacy"]
      ["std"]
      ["zdict_builder"]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.147" {inherit profileName;};
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" {profileName = "__noProfile";};
    };
  });
}
